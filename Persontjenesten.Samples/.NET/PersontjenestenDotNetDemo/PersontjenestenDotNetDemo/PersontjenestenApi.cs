//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace PersontjenestenDotNetDemo.ExternalApi.Persontjenesten
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Event_restrictedAccessClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Event_restrictedAccessClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://et.persontjenesten.test.nhn.no";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the latest event. Returns a search result with the latest available event document
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Requires HelseId scope:&lt;/b&gt; RequireParentOrgNumber, RestrictedAccess
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Event document returned</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EventDocument> LatestAsync(string api_version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/restricted-access/event/latest"
                    urlBuilder_.Append("api/v3/restricted-access/event/latest");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Event document not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of specific events by filter options. Returns a search result with max 1000 event documents
        /// <br/>starting with the specified sequenceNumber
        /// </summary>
        /// <remarks>
        /// Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be
        /// <br/>further filtered by specifying which event types that should be included in the result.
        /// <br/>The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; RequireParentOrgNumber, RestrictedAccess
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="sequenceNumber">The lowest sequence number that should be included in the result</param>
        /// <param name="eventTypes">Which event types that should be included in the result. Supports comma separated values.</param>
        /// <param name="maxLimit">Maximum number of events to return</param>
        /// <returns>Event document returned</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EventDocumentSearchResult> EventAsync(string api_version, long? sequenceNumber = null, System.Collections.Generic.IEnumerable<EventType> eventTypes = null, int? maxLimit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/restricted-access/event"
                    urlBuilder_.Append("api/v3/restricted-access/event");
                    urlBuilder_.Append('?');
                    if (sequenceNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sequenceNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sequenceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (eventTypes != null)
                    {
                        foreach (var item_ in eventTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("eventTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (maxLimit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxLimit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxLimit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventDocumentSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Event_withFullAccessClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Event_withFullAccessClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://et.persontjenesten.test.nhn.no";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the latest event. Returns a search result with the latest available event document
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Requires HelseId scope:&lt;/b&gt; FullAccess, RequireParentOrgNumber
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Event document returned</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EventDocument> LatestAsync(string api_version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/full-access/event/latest"
                    urlBuilder_.Append("api/v3/full-access/event/latest");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Event document not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of specific events by filter options. Returns a search result with max 1000 event documents
        /// <br/>starting with the specified sequenceNumber
        /// </summary>
        /// <remarks>
        /// Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be
        /// <br/>further filtered by specifying which event types that should be included in the result. If no event types
        /// <br/>are specified, all types of events will be returned.
        /// <br/>The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; FullAccess, RequireParentOrgNumber
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="sequenceNumber">The lowest sequence number that should be included in the result</param>
        /// <param name="eventTypes">Which event types that should be included in the result. Supports comma separated values.</param>
        /// <param name="maxLimit">Maximum number of events to return.</param>
        /// <returns>Event document returned</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EventDocumentSearchResult> EventAsync(string api_version, long? sequenceNumber = null, System.Collections.Generic.IEnumerable<EventType> eventTypes = null, int? maxLimit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/full-access/event"
                    urlBuilder_.Append("api/v3/full-access/event");
                    urlBuilder_.Append('?');
                    if (sequenceNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sequenceNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sequenceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (eventTypes != null)
                    {
                        foreach (var item_ in eventTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("eventTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (maxLimit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxLimit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxLimit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventDocumentSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Person_fullAccessClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Person_fullAccessClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://et.persontjenesten.test.nhn.no";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a specific person by unique id
        /// </summary>
        /// <remarks>
        /// Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; FullAccess, RequireParentOrgNumber
        /// </remarks>
        /// <param name="id">The Person id</param>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false</param>
        /// <returns>Person returned</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Person> PersonAsync(string id, System.Collections.Generic.IEnumerable<InformationPart> informationParts, string api_version, bool? includeHistory = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (informationParts == null)
                throw new System.ArgumentNullException("informationParts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/full-access/person/{id}"
                    urlBuilder_.Append("api/v3/full-access/person/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    foreach (var item_ in informationParts) { urlBuilder_.Append(System.Uri.EscapeDataString("informationParts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (includeHistory != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeHistory")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Person>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("No person found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a specific Person by Norwegian Identification Number
        /// </summary>
        /// <remarks>
        /// Get a person from a Norwegian Identification Number. This includes
        /// <br/>
        /// <br/>- National identity numbers (fødselsnummer)
        /// <br/>
        /// <br/>- D-numbers (D-nummer)
        /// <br/>
        /// <br/>- Alternate identification numbers (felles hjelpenummer)
        /// <br/>
        /// <br/>- ImmigrationAuthoritiesIdentificationNumber (DUF)
        /// <br/>
        /// <br/>            
        /// <br/>Historic NINs are supported. This is a POST request to avoid including NIN as part of the URL.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; FullAccess, RequireParentOrgNumber
        /// </remarks>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false</param>
        /// <returns>Person returned</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Person> GetByNinAsync(System.Collections.Generic.IEnumerable<InformationPart> informationParts, string api_version, bool? includeHistory = null, Body body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (informationParts == null)
                throw new System.ArgumentNullException("informationParts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/full-access/person/get-by-nin"
                    urlBuilder_.Append("api/v3/full-access/person/get-by-nin");
                    urlBuilder_.Append('?');
                    foreach (var item_ in informationParts) { urlBuilder_.Append(System.Uri.EscapeDataString("informationParts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (includeHistory != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeHistory")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Person>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("No person found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple persons from a list of unique person ids, max 100 items.
        /// </summary>
        /// <remarks>
        /// Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; FullAccess, RequireParentOrgNumber
        /// </remarks>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false</param>
        /// <returns>Person documents returned</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Person>> BulkByIdAsync(System.Collections.Generic.IEnumerable<InformationPart> informationParts, string api_version, bool? includeHistory = null, Body2 body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (informationParts == null)
                throw new System.ArgumentNullException("informationParts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/full-access/person/bulk-by-id"
                    urlBuilder_.Append("api/v3/full-access/person/bulk-by-id");
                    urlBuilder_.Append('?');
                    foreach (var item_ in informationParts) { urlBuilder_.Append(System.Uri.EscapeDataString("informationParts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (includeHistory != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeHistory")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Person>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple persons from a list of Norwegian Identification Numbers, max 100 items.
        /// </summary>
        /// <remarks>
        /// Norwegian Identification Number includes 
        /// <br/>
        /// <br/>- National identity numbers (fødselsnummer)
        /// <br/>
        /// <br/>- D-numbers (D-nummer)
        /// <br/>
        /// <br/>- Alternate identification numbers (felles hjelpenummer)
        /// <br/>
        /// <br/>- ImmigrationAuthoritiesIdentificationNumber (DUF)
        /// <br/>&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; FullAccess, RequireParentOrgNumber
        /// </remarks>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false</param>
        /// <returns>Person documents returned</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Person>> BulkByNinAsync(System.Collections.Generic.IEnumerable<InformationPart> informationParts, string api_version, bool? includeHistory = null, Body3 body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (informationParts == null)
                throw new System.ArgumentNullException("informationParts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/full-access/person/bulk-by-nin"
                    urlBuilder_.Append("api/v3/full-access/person/bulk-by-nin");
                    urlBuilder_.Append('?');
                    foreach (var item_ in informationParts) { urlBuilder_.Append(System.Uri.EscapeDataString("informationParts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (includeHistory != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeHistory")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Person>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Person_restrictedAccessClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Person_restrictedAccessClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://et.persontjenesten.test.nhn.no";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a specific person by unique id
        /// </summary>
        /// <remarks>
        /// Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; RequireParentOrgNumber, RestrictedAccess
        /// </remarks>
        /// <param name="id">The Person id</param>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false</param>
        /// <returns>Person returned</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Person> PersonAsync(string id, System.Collections.Generic.IEnumerable<InformationPart> informationParts, string api_version, bool? includeHistory = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (informationParts == null)
                throw new System.ArgumentNullException("informationParts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/restricted-access/person/{id}"
                    urlBuilder_.Append("api/v3/restricted-access/person/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    foreach (var item_ in informationParts) { urlBuilder_.Append(System.Uri.EscapeDataString("informationParts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (includeHistory != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeHistory")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Person>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("No person found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a specific Person by Norwegian Identification Number
        /// </summary>
        /// <remarks>
        /// Get a person from a Norwegian Identification Number. This includes
        /// <br/>
        /// <br/>- National identity numbers (fødselsnummer)
        /// <br/>
        /// <br/>- D-numbers (D-nummer)
        /// <br/>
        /// <br/>- Alternate identification numbers (felles hjelpenummer)
        /// <br/>
        /// <br/>- ImmigrationAuthoritiesIdentificationNumber (DUF)
        /// <br/>
        /// <br/>            
        /// <br/>Historic NINs are supported. This is a POST request to avoid including NIN as part of the URL.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; RequireParentOrgNumber, RestrictedAccess
        /// </remarks>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false</param>
        /// <returns>Person returned</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Person> GetByNinAsync(System.Collections.Generic.IEnumerable<InformationPart> informationParts, string api_version, bool? includeHistory = null, Body4 body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (informationParts == null)
                throw new System.ArgumentNullException("informationParts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/restricted-access/person/get-by-nin"
                    urlBuilder_.Append("api/v3/restricted-access/person/get-by-nin");
                    urlBuilder_.Append('?');
                    foreach (var item_ in informationParts) { urlBuilder_.Append(System.Uri.EscapeDataString("informationParts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (includeHistory != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeHistory")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Person>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("No person found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple persons from a list of unique person ids, max 100 items.
        /// </summary>
        /// <remarks>
        /// Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; RequireParentOrgNumber, RestrictedAccess
        /// </remarks>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false</param>
        /// <returns>Person documents returned</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Person>> BulkByIdAsync(System.Collections.Generic.IEnumerable<InformationPart> informationParts, string api_version, bool? includeHistory = null, Body5 body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (informationParts == null)
                throw new System.ArgumentNullException("informationParts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/restricted-access/person/bulk-by-id"
                    urlBuilder_.Append("api/v3/restricted-access/person/bulk-by-id");
                    urlBuilder_.Append('?');
                    foreach (var item_ in informationParts) { urlBuilder_.Append(System.Uri.EscapeDataString("informationParts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (includeHistory != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeHistory")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Person>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple persons from a list of Norwegian Identification Numbers, max 100 items.
        /// </summary>
        /// <remarks>
        /// Norwegian Identification Number includes 
        /// <br/>
        /// <br/>- National identity numbers (fødselsnummer)
        /// <br/>
        /// <br/>- D-numbers (D-nummer)
        /// <br/>
        /// <br/>- Alternate identification numbers (felles hjelpenummer)
        /// <br/>
        /// <br/>- ImmigrationAuthoritiesIdentificationNumber (DUF)
        /// <br/>&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; RequireParentOrgNumber, RestrictedAccess
        /// </remarks>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false</param>
        /// <returns>Person documents returned</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Person>> BulkByNinAsync(System.Collections.Generic.IEnumerable<InformationPart> informationParts, string api_version, bool? includeHistory = null, Body6 body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (informationParts == null)
                throw new System.ArgumentNullException("informationParts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/restricted-access/person/bulk-by-nin"
                    urlBuilder_.Append("api/v3/restricted-access/person/bulk-by-nin");
                    urlBuilder_.Append('?');
                    foreach (var item_ in informationParts) { urlBuilder_.Append(System.Uri.EscapeDataString("informationParts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (includeHistory != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeHistory")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Person>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PingClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PingClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://et.persontjenesten.test.nhn.no";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ping the API
        /// </summary>
        /// <returns>Pong</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PingGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "ping"
                    urlBuilder_.Append("ping");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ping the API
        /// </summary>
        /// <returns>Pong</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PingPostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "ping"
                    urlBuilder_.Append("ping");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Search_fullAccessClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Search_fullAccessClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://et.persontjenesten.test.nhn.no";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for a limited set of persons based on current information. Returns a search result with max 100 person documents.
        /// </summary>
        /// <remarks>
        /// Search parameters will match current information, historic information will not be searchable.
        /// <br/>For addresses, it's possible to search for norwegian residential, present and shared residence addresses.
        /// <br/>            
        /// <br/>Search parameters have the following requirements:
        /// <br/>
        /// <br/>1. A value for either GivenName, MiddleName, FamilyName or FullName
        /// <br/>2. Combined across all names, there must be at least three letters in total (whitespace is not counted)
        /// <br/>3. BirthDate OR MunicipalityNumber OR PostalCode with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)
        /// <br/>Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; FullAccess, RequireParentOrgNumber
        /// </remarks>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false</param>
        /// <param name="includeAinResults">flag to determine if search results should include persons with alternate identification numbers</param>
        /// <returns>Search result with a list of person documents</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PersonSearchResult> PersonAsync(System.Collections.Generic.IEnumerable<InformationPart> informationParts, string api_version, bool? includeHistory = null, bool? includeAinResults = null, Body7 body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (informationParts == null)
                throw new System.ArgumentNullException("informationParts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/full-access/search/person"
                    urlBuilder_.Append("api/v3/full-access/search/person");
                    urlBuilder_.Append('?');
                    foreach (var item_ in informationParts) { urlBuilder_.Append(System.Uri.EscapeDataString("informationParts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (includeHistory != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeHistory")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeAinResults != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeAinResults")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeAinResults, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PersonSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.Model.Person
        /// <br/>The search result is limited to the provided page size and shifted by the provided index offset.
        /// </summary>
        /// <remarks>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see Person
        /// <br/>together with the results start and end index with can be further used to paginate the potential remainder of the total search result.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; FullAccess, RequireParentOrgNumber
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeAinResults">flag to determine if search results should include persons with alternate identification numbers</param>
        /// <returns>Search result with a list of person ids</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StringSearchResult> PagedMatchListAsync(string api_version, bool? includeAinResults = null, Body8 body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/full-access/search/paged-match-list"
                    urlBuilder_.Append("api/v3/full-access/search/paged-match-list");
                    urlBuilder_.Append('?');
                    if (includeAinResults != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeAinResults")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeAinResults, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StringSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Works same way as "paged-match-list" regarding search parameters, but returned result is just the total count of matches that would have been returned.
        /// <br/>Use it to predict how many matches a search with search/paged-match-list endpoint would have returned without fetching full set of data.
        /// </summary>
        /// <remarks>
        /// See documentation for "paged-match-list" for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; FullAccess, RequireParentOrgNumber
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeAinResults">flag to determine if search results should include persons with alternate identification numbers</param>
        /// <returns>Search result with a list of person ids</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SearchMatchCountResult> MatchCountAsync(string api_version, bool? includeAinResults = null, Body9 body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/full-access/search/match-count"
                    urlBuilder_.Append("api/v3/full-access/search/match-count");
                    urlBuilder_.Append('?');
                    if (includeAinResults != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeAinResults")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeAinResults, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchMatchCountResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Search_with_restrictedAccessClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Search_with_restrictedAccessClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://et.persontjenesten.test.nhn.no";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for a limited set of persons based on current information. Returns a search result with max 100 person documents.
        /// </summary>
        /// <remarks>
        /// Search parameters will match current information, historic information will not be searchable.
        /// <br/>For addresses, it's possible to search for norwegian residential, present and shared residence addresses.
        /// <br/>            
        /// <br/>Search parameters have the following requirements:
        /// <br/>
        /// <br/>1. A value for either GivenName, MiddleName, FamilyName or FullName
        /// <br/>2. Combined across all names, there must be at least three letters in total (whitespace is not counted)
        /// <br/>3. BirthDate OR MunicipalityNumber OR PostalCode with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)
        /// <br/>Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; RequireParentOrgNumber, RestrictedAccess
        /// </remarks>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false</param>
        /// <param name="includeAinResults">flag to determine if search results should include persons with alternate identification numbers</param>
        /// <returns>Search result with a list of person documents</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PersonSearchResult> PersonAsync(System.Collections.Generic.IEnumerable<InformationPart> informationParts, string api_version, bool? includeHistory = null, bool? includeAinResults = null, Body10 body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (informationParts == null)
                throw new System.ArgumentNullException("informationParts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/restricted-access/search/person"
                    urlBuilder_.Append("api/v3/restricted-access/search/person");
                    urlBuilder_.Append('?');
                    foreach (var item_ in informationParts) { urlBuilder_.Append(System.Uri.EscapeDataString("informationParts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (includeHistory != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeHistory")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeAinResults != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeAinResults")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeAinResults, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PersonSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized, invalid token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Forbidden, invalid scope", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.Model.Person
        /// <br/>The search result is limited to the provided page size and shifted by the provided index offset.
        /// </summary>
        /// <remarks>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see Person
        /// <br/>together with the results start and end index with can be further used to paginate the potential remainder of the total search result.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; RequireParentOrgNumber, RestrictedAccess
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeAinResults">flag to determine if search results should include persons with alternate identification numbers</param>
        /// <returns>Search result with a list of person ids</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StringSearchResult> PagedMatchListAsync(string api_version, bool? includeAinResults = null, Body11 body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/restricted-access/search/paged-match-list"
                    urlBuilder_.Append("api/v3/restricted-access/search/paged-match-list");
                    urlBuilder_.Append('?');
                    if (includeAinResults != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeAinResults")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeAinResults, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StringSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Works same way as "paged-match-list" regarding search parameters, but returned result is just the total count of matches that would have been returned.
        /// </summary>
        /// <remarks>
        /// See documentation for "paged-match-list" for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; RequireParentOrgNumber, RestrictedAccess
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="includeAinResults">flag to determine if search results should include persons with alternate identification numbers</param>
        /// <returns>Search result with a list of person ids</returns>
        /// <exception cref="PersontjenestenApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SearchMatchCountResult> MatchCountAsync(string api_version, bool? includeAinResults = null, Body12 body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (api_version == null)
                        throw new System.ArgumentNullException("api_version");
                    request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v3/restricted-access/search/match-count"
                    urlBuilder_.Append("api/v3/restricted-access/search/match-count");
                    urlBuilder_.Append('?');
                    if (includeAinResults != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeAinResults")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeAinResults, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchMatchCountResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PersontjenestenApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PersontjenestenApiException<ProblemDetails>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PersontjenestenApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new PersontjenestenApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Confidentiality level of an address in the National Population Register.
    /// <br/>
    /// <br/>FREG: Adressegradering&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Unclassified&lt;/i&gt; - FREG: Ugradert&lt;/li&gt;&lt;li&gt;&lt;i&gt;ClientAddress&lt;/i&gt; - FREG: Klientadresse&lt;/li&gt;&lt;li&gt;&lt;i&gt;Confidential&lt;/i&gt; - FREG: Fortrolig&lt;/li&gt;&lt;li&gt;&lt;i&gt;StrictlyConfidential&lt;/i&gt; - FREG: StrengtFortrolig&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddressConfidentiality
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unclassified")]
        Unclassified = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ClientAddress")]
        ClientAddress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Confidential")]
        Confidential = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"StrictlyConfidential")]
        StrictlyConfidential = 3,

    }

    /// <summary>
    /// This information is used to describe the overall protection level a person have on all his addresses of types
    /// <br/>residential, living and shared residence addresses. The address protection does not apply to
    /// <br/>contact addresses.
    /// <br/>
    /// <br/>FREG: GraderingAvAdresse
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddressProtection
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddressProtection(bool? @isValid, AddressConfidentiality? @protectionLevel, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.ProtectionLevel = @protectionLevel;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// Overall protection level on addresses.
        /// <br/>Legal values are:
        /// <br/>AddressConfidentiality.UnclassifiedAddressConfidentiality.ConfidentialAddressConfidentiality.StrictlyConfidential
        /// <br/>FREG: Graderingsnivaa
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("protectionLevel")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AddressConfidentiality? ProtectionLevel { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Adressetype&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;ResidentialAddress&lt;/i&gt; - Remarks: Bostedsadresse&lt;/li&gt;&lt;li&gt;&lt;i&gt;LivingAddress&lt;/i&gt; - Remarks: Oppholdsadresse&lt;/li&gt;&lt;li&gt;&lt;i&gt;PostalAddress&lt;/i&gt; - Remarks: Postadresse&lt;/li&gt;&lt;li&gt;&lt;i&gt;ForeignPostalAddress&lt;/i&gt; - Remarks: PostadresseIUtlandet&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddressType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ResidentialAddress")]
        ResidentialAddress = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LivingAddress")]
        LivingAddress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PostalAddress")]
        PostalAddress = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ForeignPostalAddress")]
        ForeignPostalAddress = 3,

    }

    /// <summary>
    /// 
    /// <br/>FREG: Foedsel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Birth
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Birth(string @birthCountry, string @birthCountyName, string @birthCountyNumber, System.DateTimeOffset? @birthDate, string @birthMunicipalityName, string @birthMunicipalityNumber, string @birthPlace, string @birthYear, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.BirthDate = @birthDate;

            this.BirthYear = @birthYear;

            this.BirthPlace = @birthPlace;

            this.BirthMunicipalityNumber = @birthMunicipalityNumber;

            this.BirthMunicipalityName = @birthMunicipalityName;

            this.BirthCountyNumber = @birthCountyNumber;

            this.BirthCountyName = @birthCountyName;

            this.BirthCountry = @birthCountry;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// Date of birth. Time and time zone are unknown and must be ignored.
        /// <br/>
        /// <br/>FREG: Foedselsdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]
        public System.DateTimeOffset? BirthDate { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Foedselsaar
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthYear")]
        public string BirthYear { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Foedested
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthPlace")]
        public string BirthPlace { get; init; }

        /// <summary>
        /// Norwegian municipality number where the birth was registered, if the person was born in Norway.
        /// <br/>
        /// <br/>FREG: FoedekommuneINorge
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthMunicipalityNumber")]
        public string BirthMunicipalityNumber { get; init; }

        /// <summary>
        /// A name identifying a municipality or
        /// <br/>municipality-like area
        /// <br/>
        /// <br/>SSB: Kommunenavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthMunicipalityName")]
        public string BirthMunicipalityName { get; init; }

        /// <summary>
        /// A number identifying a county 
        /// <br/>
        /// <br/>SSB: Fylkesnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthCountyNumber")]
        public string BirthCountyNumber { get; init; }

        /// <summary>
        /// A name identifying a county
        /// <br/>
        /// <br/>SSB: Fylkesnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthCountyName")]
        public string BirthCountyName { get; init; }

        /// <summary>
        /// The country code for the country where the person was born.
        /// <br/>Country codes is given in ISO 3166-1 alpha 3
        /// <br/>
        /// <br/>FREG: Foedeland
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthCountry")]
        public string BirthCountry { get; init; }

    }

    /// <summary>
    /// Additional information about a persons birth if this person was born in Norway.
    /// <br/>
    /// <br/>FREG: FoedselINorge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record BirthInNorway
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public BirthInNorway(bool? @isValid, long? @multipleBirthNumber, string @organizationName, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.OrganizationName = @organizationName;

            this.MultipleBirthNumber = @multipleBirthNumber;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// The organization/institution where the person was born, for example "Molde sjukehus".
        /// <br/>
        /// <br/>FREG: Foedselsinstitusjonsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("organizationName")]
        public string OrganizationName { get; init; }

        /// <summary>
        /// The number of this person if there were multiple births. This number is a combination of multiple data points:
        /// <br/>First number = the total number of children in multiple births
        /// <br/>Second number = this persons number in the sequence
        /// <br/>            
        /// <br/>Example: "21" means that this child was the firstborn twin (this person was the first of two births)
        /// <br/>
        /// <br/>FREG: Rekkefoelgenummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("multipleBirthNumber")]
        public long? MultipleBirthNumber { get; init; }

    }

    /// <summary>
    /// Address for specifying areas in a municipality that has yet to get a StreetAddress
    /// <br/>FREG: Matrikkeladresse
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CadastralAddress
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CadastralAddress(string @addressAdditionalName, CadastralNumber @cadastralNumber, City @city, string @coAddressName, string @separatelyOccupiedUnitNumber, SeparatelyOccupiedUnitType? @separatelyOccupiedUnitType, long? @subNumber)

        {

            this.SeparatelyOccupiedUnitNumber = @separatelyOccupiedUnitNumber;

            this.SeparatelyOccupiedUnitType = @separatelyOccupiedUnitType;

            this.CadastralNumber = @cadastralNumber;

            this.SubNumber = @subNumber;

            this.AddressAdditionalName = @addressAdditionalName;

            this.City = @city;

            this.CoAddressName = @coAddressName;

        }    /// <summary>
        /// A letter and four digits that uniquely identifies the
        /// <br/>separately occupied unit inside a addressable building
        /// <br/>or part of a building
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>Two first digits represent floor number
        /// <br/>Freg: Bruksenhetsnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("separatelyOccupiedUnitNumber")]
        public string SeparatelyOccupiedUnitNumber { get; init; }

        /// <summary>
        /// Categorization of occupancy unit type
        /// <br/>
        /// <br/>FREG: Bruksenhetstype
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("separatelyOccupiedUnitType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SeparatelyOccupiedUnitType? SeparatelyOccupiedUnitType { get; init; }

        /// <summary>
        /// Official numbering of each Cadastral
        /// <br/>
        /// <br/>FREG: Matrikkelnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cadastralNumber")]
        public CadastralNumber CadastralNumber { get; init; }

        /// <summary>
        /// Used with CadastralNumber when a real estate property
        /// <br/>is linked to several different addresses
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>I.e. each building on a farmyard has a sub number
        /// <br/>Freg: Undernummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subNumber")]
        public long? SubNumber { get; init; }

        /// <summary>
        /// Inherited farm name (bruksnavn) or name of a institution or building,
        /// <br/>used as a part of the official address
        /// <br/>
        /// <br/>FREG: Addressetilleggsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressAdditionalName")]
        public string AddressAdditionalName { get; init; }

        /// <summary>
        /// Post location / city and zip code
        /// <br/>
        /// <br/>FREG: Poststed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public City City { get; init; }

        /// <summary>
        /// Description of who the recipient is in care of (C/O),
        /// <br/>or which recipient in an organization (v/ = with, or Att: = "Attention")
        /// <br/>
        /// <br/>FREG: CoAdressenavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("coAddressName")]
        public string CoAddressName { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Matrikkeladresse.Matrikkelnummer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CadastralNumber
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CadastralNumber(string @countyName, string @countyNumber, long? @leaseholdNumber, long? @municipalityLandNumber, string @municipalityName, string @municipalityNumber, long? @titleNumber)

        {

            this.MunicipalityNumber = @municipalityNumber;

            this.MunicipalityName = @municipalityName;

            this.CountyNumber = @countyNumber;

            this.CountyName = @countyName;

            this.MunicipalityLandNumber = @municipalityLandNumber;

            this.TitleNumber = @titleNumber;

            this.LeaseholdNumber = @leaseholdNumber;

        }    /// <summary>
        /// A four digit code identifying a municipality or municipality-like area.
        /// <br/>Municipalities are defined by SSB in classification 131.
        /// <br/>&lt;see href="https://www.ssb.no/klass/klassifikasjoner/131" /&gt;
        /// <br/>FREG: Kommunenummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("municipalityNumber")]
        public string MunicipalityNumber { get; init; }

        /// <summary>
        /// The name of the municipality. Some municipalities also include names in Sámi languages.
        /// <br/>
        /// <br/>SSB: Kommunenavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("municipalityName")]
        public string MunicipalityName { get; init; }

        /// <summary>
        /// A two digit code identifying a county.
        /// <br/>Counties are defined by SSB in classification 104.
        /// <br/>&lt;see href="https://www.ssb.no/klass/klassifikasjoner/104" /&gt;
        /// <br/>SSB: Fylkesnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countyNumber")]
        public string CountyNumber { get; init; }

        /// <summary>
        /// The name of the county. Some counties also include names in Sámi languages.
        /// <br/>
        /// <br/>SSB: Fylkesnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countyName")]
        public string CountyName { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gårdsnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("municipalityLandNumber")]
        public long? MunicipalityLandNumber { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Bruksnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("titleNumber")]
        public long? TitleNumber { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Festenummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("leaseholdNumber")]
        public long? LeaseholdNumber { get; init; }

    }

    /// <summary>
    /// Information on citizenships held by the person.
    /// <br/>            
    /// <br/>Country codes are given in ISO 3166-1 alpha 3, with the following
    /// <br/>extensions, following rules from UDI:
    /// <br/>            
    /// <br/>XXX = No citizenship
    /// <br/>XUK = Unknown citizenship
    /// <br/>XXK = Kosovo
    /// <br/>
    /// <br/>FREG: Statsborgerskap
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Citizenship
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Citizenship(System.DateTimeOffset? @aquiredDate, string @countryCode, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.CountryCode = @countryCode;

            this.AquiredDate = @aquiredDate;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// The country code, given in ISO 3166-1 alpha 3
        /// <br/>
        /// <br/>FREG: Statsborgerskap
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        public string CountryCode { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Ervervsdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("aquiredDate")]
        public System.DateTimeOffset? AquiredDate { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Bibehold&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;CitizenshipRetained&lt;/i&gt; - FREG: HarBibehold&lt;/li&gt;&lt;li&gt;&lt;i&gt;CitizenshipNoLongerRetained&lt;/i&gt; - FREG: HarIkkeLengerBibehold&lt;/li&gt;&lt;li&gt;&lt;i&gt;NorwegianCitizenRetentionNotRequired&lt;/i&gt; - FREG: NorskStatsborgerTrengerIkkeBibehold&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CitizenshipRetentionStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CitizenshipRetained")]
        CitizenshipRetained = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CitizenshipNoLongerRetained")]
        CitizenshipNoLongerRetained = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NorwegianCitizenRetentionNotRequired")]
        NorwegianCitizenRetentionNotRequired = 2,

    }

    /// <summary>
    /// Post location / city and zip code
    /// <br/>
    /// <br/>FREG: Poststed
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record City
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public City(string @cityName, string @postalCode)

        {

            this.CityName = @cityName;

            this.PostalCode = @postalCode;

        }    /// <summary>
        /// Post location / city name
        /// <br/>
        /// <br/>FREG: Poststed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cityName")]
        public string CityName { get; init; }

        /// <summary>
        /// Postal code / zip code for each post area
        /// <br/>
        /// <br/>FREG: Postnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        public string PostalCode { get; init; }

    }

    /// <summary>
    /// Contact Register Information for a person in the Person API
    /// <br/>Data is from the Contact and Reservation Register (KRR)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CommonContactRegisterInformation
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CommonContactRegisterInformation(string @certificate, ContactInformationResource @contactInformation, DigitalPostResource @digitalPost, string @language, string @languageLastUpdated, NotificationStatus? @notificationStatus, Reservation? @reservation, string @reservationTime, string @reservationUpdated, Status? @status)

        {

            this.Reservation = @reservation;

            this.Status = @status;

            this.ReservationTime = @reservationTime;

            this.ReservationUpdated = @reservationUpdated;

            this.NotificationStatus = @notificationStatus;

            this.ContactInformation = @contactInformation;

            this.DigitalPost = @digitalPost;

            this.Certificate = @certificate;

            this.Language = @language;

            this.LanguageLastUpdated = @languageLastUpdated;

        }    /// <summary>
        /// 
        /// <br/>KRR: reservasjon
        /// <br/>            Reservation given by a person, used in accordance to eForvaltningsforskriften § 15 a.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reservation")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Reservation? Reservation { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: status
        /// <br/>            The status of a person
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status? Status { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: reservasjonstidspunkt
        /// <br/>            The time when a person made a reservation. Only displayed if the user is reserved.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reservationTime")]
        public string ReservationTime { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: reservasjonstidspunkt
        /// <br/>            The time when the reservation status was updated
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reservationUpdated")]
        public string ReservationUpdated { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: varslingsstatus
        /// <br/>            Describes if a person can be notified or not
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("notificationStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NotificationStatus? NotificationStatus { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: kontaktinformasjon
        /// <br/>            Contact information for a person
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactInformation")]
        public ContactInformationResource ContactInformation { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: digital_post
        /// <br/>            Digital Post information for a person
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("digitalPost")]
        public DigitalPostResource DigitalPost { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: sertifikat
        /// <br/>            Person certificate for digital post
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("certificate")]
        public string Certificate { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: spraak
        /// <br/>            Persons preferred language for communication with the public
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public string Language { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: spraak_oppdatert
        /// <br/>            Last time language choice was updated
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("languageLastUpdated")]
        public string LanguageLastUpdated { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Kontaktadresse
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ContactAddress
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ContactAddress(AddressConfidentiality? @addressConfidentiality, string @cadastralIdentifier, FreeFormPostalAddress @freeFormPostalAddress, bool? @isValid, PostBoxAddress @postBoxAddress, string @reason, System.DateTimeOffset? @registeredAt, string @source, StreetAddressForPost @streetAddress, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.AddressConfidentiality = @addressConfidentiality;

            this.PostBoxAddress = @postBoxAddress;

            this.StreetAddress = @streetAddress;

            this.FreeFormPostalAddress = @freeFormPostalAddress;

            this.CadastralIdentifier = @cadastralIdentifier;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Adressegradering
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressConfidentiality")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AddressConfidentiality? AddressConfidentiality { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Postboksadresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postBoxAddress")]
        public PostBoxAddress PostBoxAddress { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Vegadresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("streetAddress")]
        public StreetAddressForPost StreetAddress { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: PostadresseIFrittFormat
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("freeFormPostalAddress")]
        public FreeFormPostalAddress FreeFormPostalAddress { get; init; }

        /// <summary>
        /// Unique identifier from the Norwegian Mapping Authority.
        /// <br/>
        /// <br/>FREG: AdresseIdentifikatorFraMatrikkelen
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cadastralIdentifier")]
        public string CadastralIdentifier { get; init; }

    }

    /// <summary>
    /// Contact information for residuary estate
    /// <br/>
    /// <br/>FREG: KontaktinformasjonForDoedsbo.KontaktAdresseForDoedsbo
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ContactAddressForResiduaryEstate
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ContactAddressForResiduaryEstate(System.Collections.Generic.ICollection<string> @addressLine, string @city, string @countryCode, string @postalCode)

        {

            this.AddressLine = @addressLine;

            this.City = @city;

            this.PostalCode = @postalCode;

            this.CountryCode = @countryCode;

        }    /// <summary>
        /// Address lines
        /// <br/>
        /// <br/>FREG: Adresselinje
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine")]
        public System.Collections.Generic.ICollection<string> AddressLine { get; init; }

        /// <summary>
        /// Post location / city
        /// <br/>
        /// <br/>FREG: Poststedsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; init; }

        /// <summary>
        /// Post code / zip code
        /// <br/>
        /// <br/>FREG: Postnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        public string PostalCode { get; init; }

        /// <summary>
        /// To letter country code
        /// <br/>
        /// <br/>FREG: Landkode
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        public string CountryCode { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>KRR: kontaktinformasjon
    /// <br/>            The Contact information of a person
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ContactInformationResource
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ContactInformationResource(string @email, Duplicated? @emailDuplicated, string @emailLastUpdated, string @emailLastValidated, string @emailLastVerified, string @phoneNumber, Duplicated? @phoneNumberDuplicated, string @phoneNumberLastUpdated, string @phoneNumberLastValidated, string @phoneNumberLastVerified)

        {

            this.Email = @email;

            this.EmailLastUpdated = @emailLastUpdated;

            this.EmailDuplicated = @emailDuplicated;

            this.EmailLastVerified = @emailLastVerified;

            this.EmailLastValidated = @emailLastValidated;

            this.PhoneNumber = @phoneNumber;

            this.PhoneNumberLastUpdated = @phoneNumberLastUpdated;

            this.PhoneNumberDuplicated = @phoneNumberDuplicated;

            this.PhoneNumberLastVerified = @phoneNumberLastVerified;

            this.PhoneNumberLastValidated = @phoneNumberLastValidated;

        }    /// <summary>
        /// 
        /// <br/>KRR: epostadresse
        /// <br/>            The Email a person has registered in KRR
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: epostadresse_oppdatert
        /// <br/>            Last time The Email was updated by person. New or changed email address. Date can be more than 18 months back in time
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailLastUpdated")]
        public string EmailLastUpdated { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: epostadresse_duplisert
        /// <br/>            The Email is registered to one or several other persons in KRR
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailDuplicated")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Duplicated? EmailDuplicated { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: epostadresse_sist_verifisert
        /// <br/>            Last time email was verified by person. Confirmed by person at least twice a year
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailLastVerified")]
        public string EmailLastVerified { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: epostadresse_sist_validert
        /// <br/>            Last time email was validated by code sent to the registered email adress
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailLastValidated")]
        public string EmailLastValidated { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: mobiltelefonnummer
        /// <br/>            The Phone number the person has registered in KRR
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: mobiltelefonnummer_oppdatert
        /// <br/>            Last time The Phone number was updated by person. New or changed phone number. Date can be more than 18 months back in time
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberLastUpdated")]
        public string PhoneNumberLastUpdated { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: mobiltelefonnummer_duplisert
        /// <br/>            The phone number is registered to one or several other persons in KRR
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberDuplicated")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Duplicated? PhoneNumberDuplicated { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: mobiltelefonnummer_sist_verifisert
        /// <br/>            Last time the Phone number was verified by person. Confirmed by person at least twice a year
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberLastVerified")]
        public string PhoneNumberLastVerified { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: mobiltelefonnummer_sist_validert
        /// <br/>            Last time Phone number was validated by code sent to the registered Phone number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberLastValidated")]
        public string PhoneNumberLastValidated { get; init; }

    }

    /// <summary>
    /// Information on a persons death.
    /// <br/>
    /// <br/>FREG: Doedsfall
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Death
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Death(System.DateTimeOffset? @deceasedDate, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.DeceasedDate = @deceasedDate;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// The date when the person was declared dead. Time and time zone are unknown and must be ignored.
        /// <br/>
        /// <br/>FREG: Doedsdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deceasedDate")]
        public System.DateTimeOffset? DeceasedDate { get; init; }

    }

    /// <summary>
    /// FREG: FratattRettsligHandleevne
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DeprivedLegalAuthority
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public DeprivedLegalAuthority(bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>KRR: digital_post
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DigitalPostResource
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public DigitalPostResource(string @digitalPostAddress, string @digitalPostVendorAddress)

        {

            this.DigitalPostAddress = @digitalPostAddress;

            this.DigitalPostVendorAddress = @digitalPostVendorAddress;

        }    /// <summary>
        /// 
        /// <br/>KRR: postkasseadresse
        /// <br/>            A unique address for a persons post address with a post vendor
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("digitalPostAddress")]
        public string DigitalPostAddress { get; init; }

        /// <summary>
        /// 
        /// <br/>KRR: postkasseleverandoeradresse
        /// <br/>            org number for a post vendor
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("digitalPostVendorAddress")]
        public string DigitalPostVendorAddress { get; init; }

    }

    /// <summary>
    /// Document verification
    /// <br/>
    /// <br/>FREG: Dokumentkontroll
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DocumentVerification
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public DocumentVerification(string @verificationStatus, System.DateTimeOffset? @verifiedAt)

        {

            this.VerificationStatus = @verificationStatus;

            this.VerifiedAt = @verifiedAt;

        }    /// <summary>
        /// What kind of technical control is done on the document.
        /// <br/>I.e. "Keesing-machine" or other methods
        /// <br/>
        /// <br/>FREG: Dokumentkontrollstatus
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verificationStatus")]
        public string VerificationStatus { get; init; }

        /// <summary>
        /// Time and date for the verification
        /// <br/>
        /// <br/>FREG: Dokumentkontrolltidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verifiedAt")]
        public System.DateTimeOffset? VerifiedAt { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>KRR: Duplisert&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Yes&lt;/i&gt; - KRR: JA&lt;/li&gt;&lt;li&gt;&lt;i&gt;No&lt;/i&gt; - KRR: NEI&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Duplicated
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 1,

    }

    /// <summary>
    /// Information on the new country and city of residence for the person after emigration from Norway.
    /// <br/>Country codes are given in ISO 3166-1 alfa 3
    /// <br/>
    /// <br/>FREG: UtflyttingFraNorge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record EmigrationFromNorway
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public EmigrationFromNorway(System.DateTimeOffset? @emigratedMoveDate, string @emigratedToCity, string @emigratedToCountry, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.EmigratedToCountry = @emigratedToCountry;

            this.EmigratedToCity = @emigratedToCity;

            this.EmigratedMoveDate = @emigratedMoveDate;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Tilflyttingsland
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emigratedToCountry")]
        public string EmigratedToCountry { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: TilflyttingsstedIUtlandet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emigratedToCity")]
        public string EmigratedToCity { get; init; }

        /// <summary>
        /// Reported as move date by person
        /// <br/>
        /// <br/>FREG: Utflyttingsdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emigratedMoveDate")]
        public System.DateTimeOffset? EmigratedMoveDate { get; init; }

    }

    /// <summary>
    /// Information on a event in the Person API.
    /// <br/>Data is primarily from the National Population Register (FREG), but also contains data from other sources.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record EventDocument
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public EventDocument(string @eventType, string @nin, string @personId, string @sequenceNumber)

        {

            this.SequenceNumber = @sequenceNumber;

            this.PersonId = @personId;

            this.EventType = @eventType;

            this.Nin = @nin;

        }    /// <summary>
        /// Internal sequence number, referring to the event that produced this version of the person information.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sequenceNumber")]
        public string SequenceNumber { get; init; }

        /// <summary>
        /// Person id, referring to Person.Id, the Id of the Person that was changed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("personId")]
        public string PersonId { get; init; }

        /// <summary>
        /// Event type, referring to what type of change has happened.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eventType")]
        public string EventType { get; init; }

        /// <summary>
        /// Norwegian identification number (NIN) of the Person that was changed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nin")]
        public string Nin { get; init; }

    }

    /// <summary>
    /// Search result object with a list of results.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record EventDocumentSearchResult
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public EventDocumentSearchResult(int? @endIndex, System.Collections.Generic.ICollection<EventDocument> @results, int? @startIndex)

        {

            this.Results = @results;

            this.StartIndex = @startIndex;

            this.EndIndex = @endIndex;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.ICollection<EventDocument> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startIndex")]
        [System.Obsolete]
        public int? StartIndex { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("endIndex")]
        [System.Obsolete]
        public int? EndIndex { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Hendelsestype&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Unknown&lt;/i&gt; - Persontjenesten hendelse for ukjent hendelseårsak (Nulldagsuttrekk)&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonIsCreated&lt;/i&gt; - FREG: PersonErOpprettet&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonIsReactivated&lt;/i&gt; - FREG: PersonErReaktivert&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonIsUpdated&lt;/i&gt; - FREG: PersonErOppdatert&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonIsDiscontinued&lt;/i&gt; - FREG: PersonErOpphoert&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonIsContinuedAsValidUponMerger&lt;/i&gt; - FREG: PersonErViderefoertSomGjeldendeVedSammenslaaing&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonIsDiscontinuedAsDuplicate&lt;/i&gt; - FREG: PersonErOpphoertSomDublett&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonIsChangedBySplitting&lt;/i&gt; - FREG: PersonErEndretVedSplitting&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonIsRestoredBySplitting&lt;/i&gt; - FREG: PersonErGjenopprettetVedSplitting&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonIsDeceased&lt;/i&gt; - FREG: PersonErDoed&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonIsResident&lt;/i&gt; - FREG: PersonErBosatt&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonIsEmigrated&lt;/i&gt; - FREG: PersonErUtflyttet&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInStatus&lt;/i&gt; - FREG: EndringIStatus&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInIdentityVerification&lt;/i&gt; - FREG: EndringIIdentitetsgrunnlag&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInForeignPersonIdentificationNumber&lt;/i&gt; - FREG: EndringIUtenlandskPersonidentifikasjon&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInImmigrationAuthoritiesIdentificationNumber&lt;/i&gt; - FREG: EndringIUtlendingsmyndighetenesIdentifikasjonsnummer&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInIdentificationDocument&lt;/i&gt; - FREG: EndringILegitimasjonsdokument&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInNorwegianIdentificationNumber&lt;/i&gt; - FREG: EndringIIdentifikasjonsnummer&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInFalseIdentity&lt;/i&gt; - FREG: EndringIFalskIdentitet&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInResiduaryEstateContactInformation&lt;/i&gt; - FREG: EndringIKontaktopplysningerForDoedsbo&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInSharedResidence&lt;/i&gt; - FREG: EndringIDeltBosted&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInBirth&lt;/i&gt; - FREG: EndringIFoedsel&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInBirthInNorway&lt;/i&gt; - FREG: EndringIFoedselINorge&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInGender&lt;/i&gt; - FREG: EndringIKjoenn&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInFamilyRelation&lt;/i&gt; - FREG: EndringIFamilierelasjon&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInMaritalStatus&lt;/i&gt; - FREG: EndringISivilstand&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInDeath&lt;/i&gt; - FREG: EndringIDoedsfall&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInName&lt;/i&gt; - FREG: EndringINavn&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInAddressProtection&lt;/i&gt; - FREG: EndringIAdressebeskyttelse&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInResidentialAddress&lt;/i&gt; - FREG: EndringIBostedsadresse&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInResidentialAddressWithoutRelocation&lt;/i&gt; - FREG: EndringIBostedsadresseUtenFlytting&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInPresentAddress&lt;/i&gt; - FREG: EndringIOppholdsadresse&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInImmigrationToNorway&lt;/i&gt; - FREG: EndringIInnflytting&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInEmigrationFromNorway&lt;/i&gt; - FREG: EndringIUtflytting&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInUseOfSamiLanguage&lt;/i&gt; - FREG: EndringIBrukAvSamiskSpraak&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInSamiParliamentElectoralRegistryStatus&lt;/i&gt; - FREG: EndringISametingetsValgmanntall&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInContactinformation&lt;/i&gt; - FREG: EndringIKontaktinformasjon&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInParentalResponsibility&lt;/i&gt; - FREG: EndringIForeldreansvar&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInCitizenship&lt;/i&gt; - FREG: EndringIStatsborgerskap&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInResidency&lt;/i&gt; - FREG: EndringIOpphold&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInResidencyOnSvalbard&lt;/i&gt; - FREG: EndringIOppholdPaaSvalbard&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInGuardianship&lt;/i&gt; - FREG: EndringIVergemaal&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInPerson&lt;/i&gt; - FREG: EndringIPerson&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonCorrected&lt;/i&gt; - Persontjenesten hendelse for korrigering av persondokument&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonPopulated&lt;/i&gt; - Persontjenesten hendelse for når personen kom inn i systemet (Nulldagsuttrekk)&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInPostalAddress&lt;/i&gt; - Hendelse for endring i Postadresse&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInForeignPostalAddress&lt;/i&gt; - Hendelse for endring i PostadresseIUtlandet&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInResidencePermit&lt;/i&gt; - Hendelse for endring i Opphold&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInDeprivedLegalAuthority&lt;/i&gt; - Hendelse for endring i FratattRettsligHandleevne&lt;/li&gt;&lt;li&gt;&lt;i&gt;CreatedAlternateIdentificationNumber&lt;/i&gt; - Hendelse for opprettelse av FellesHjelpenummer&lt;/li&gt;&lt;li&gt;&lt;i&gt;UpdatedAlternateIdentificationNumber&lt;/i&gt; - Hendelse for oppdatering av FellesHjelpenummer&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInLegalAuthority&lt;/i&gt; - Hendelse for endring i RettsligHandleevne&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChangeInCommonContactRegisterInformation&lt;/i&gt; - Hendelse for oppdatering av Kontakt og ReservasjonsRegister info&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonIsCreated")]
        PersonIsCreated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonIsReactivated")]
        PersonIsReactivated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonIsUpdated")]
        PersonIsUpdated = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonIsDiscontinued")]
        PersonIsDiscontinued = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonIsContinuedAsValidUponMerger")]
        PersonIsContinuedAsValidUponMerger = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonIsDiscontinuedAsDuplicate")]
        PersonIsDiscontinuedAsDuplicate = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonIsChangedBySplitting")]
        PersonIsChangedBySplitting = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonIsRestoredBySplitting")]
        PersonIsRestoredBySplitting = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonIsDeceased")]
        PersonIsDeceased = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonIsResident")]
        PersonIsResident = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonIsEmigrated")]
        PersonIsEmigrated = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInStatus")]
        ChangeInStatus = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInIdentityVerification")]
        ChangeInIdentityVerification = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInForeignPersonIdentificationNumber")]
        ChangeInForeignPersonIdentificationNumber = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInImmigrationAuthoritiesIdentificationNumber")]
        ChangeInImmigrationAuthoritiesIdentificationNumber = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInIdentificationDocument")]
        ChangeInIdentificationDocument = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInNorwegianIdentificationNumber")]
        ChangeInNorwegianIdentificationNumber = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInFalseIdentity")]
        ChangeInFalseIdentity = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInResiduaryEstateContactInformation")]
        ChangeInResiduaryEstateContactInformation = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInSharedResidence")]
        ChangeInSharedResidence = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInBirth")]
        ChangeInBirth = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInBirthInNorway")]
        ChangeInBirthInNorway = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInGender")]
        ChangeInGender = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInFamilyRelation")]
        ChangeInFamilyRelation = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInMaritalStatus")]
        ChangeInMaritalStatus = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInDeath")]
        ChangeInDeath = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInName")]
        ChangeInName = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInAddressProtection")]
        ChangeInAddressProtection = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInResidentialAddress")]
        ChangeInResidentialAddress = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInResidentialAddressWithoutRelocation")]
        ChangeInResidentialAddressWithoutRelocation = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInPresentAddress")]
        ChangeInPresentAddress = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInImmigrationToNorway")]
        ChangeInImmigrationToNorway = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInEmigrationFromNorway")]
        ChangeInEmigrationFromNorway = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInUseOfSamiLanguage")]
        ChangeInUseOfSamiLanguage = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInSamiParliamentElectoralRegistryStatus")]
        ChangeInSamiParliamentElectoralRegistryStatus = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInContactinformation")]
        ChangeInContactinformation = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInParentalResponsibility")]
        ChangeInParentalResponsibility = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInCitizenship")]
        ChangeInCitizenship = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInResidency")]
        ChangeInResidency = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInResidencyOnSvalbard")]
        ChangeInResidencyOnSvalbard = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInGuardianship")]
        ChangeInGuardianship = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInPerson")]
        ChangeInPerson = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonCorrected")]
        PersonCorrected = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonPopulated")]
        PersonPopulated = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInPostalAddress")]
        ChangeInPostalAddress = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInForeignPostalAddress")]
        ChangeInForeignPostalAddress = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInResidencePermit")]
        ChangeInResidencePermit = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInDeprivedLegalAuthority")]
        ChangeInDeprivedLegalAuthority = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CreatedAlternateIdentificationNumber")]
        CreatedAlternateIdentificationNumber = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"UpdatedAlternateIdentificationNumber")]
        UpdatedAlternateIdentificationNumber = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInLegalAuthority")]
        ChangeInLegalAuthority = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeInCommonContactRegisterInformation")]
        ChangeInCommonContactRegisterInformation = 52,

    }

    /// <summary>
    /// Information regarding false identity on a person
    /// <br/>An identity belonging to another person then the person using it.
    /// <br/>Or not belonging to anyone at all, but presented as a real identity
    /// <br/>            
    /// <br/>Persons who is currently or have had their NIN (Norwegian Identification Number)
    /// <br/>misused by others, will not have information about the misuse.
    /// <br/>Neither will there be info on the person misusing another persons identity.
    /// <br/>
    /// <br/>FREG: FalskIdentitet
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FalseIdentity
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FalseIdentity(string @correctIdentityFromIdentificationNumber, IdentifyingInformation @correctIdentityFromInformation, bool? @isCorrectIdentityUnknown, bool? @isFalseIdentity, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.CorrectIdentityFromInformation = @correctIdentityFromInformation;

            this.IsCorrectIdentityUnknown = @isCorrectIdentityUnknown;

            this.CorrectIdentityFromIdentificationNumber = @correctIdentityFromIdentificationNumber;

            this.IsFalseIdentity = @isFalseIdentity;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// A persons correct identity described with information
        /// <br/>that can lead to a correct identification
        /// <br/>
        /// <br/>FREG: RettIdentitetVedOpplysninger
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("correctIdentityFromInformation")]
        public IdentifyingInformation CorrectIdentityFromInformation { get; init; }

        /// <summary>
        /// If true, the correct identity for the false identity is not known
        /// <br/>
        /// <br/>FREG: RettIdentitetErUkjent
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isCorrectIdentityUnknown")]
        public bool? IsCorrectIdentityUnknown { get; init; }

        /// <summary>
        /// The correct identity for the false identity
        /// <br/>is known by the Norwegian Identification Number (fødselsnummer or D-number)
        /// <br/>
        /// <br/>FREG: RettIdentitetVedIdentifikasjonsnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("correctIdentityFromIdentificationNumber")]
        public string CorrectIdentityFromIdentificationNumber { get; init; }

        /// <summary>
        /// 
        /// <br/>Remarks: 
        /// <br/>            Should always be true
        /// <br/>            Freg: ErFalsk
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isFalseIdentity")]
        public bool? IsFalseIdentity { get; init; }

    }

    /// <summary>
    /// Family relation between Person and a related person.
    /// <br/>The related person has either a valid identification number (nin or d-number) or RelatedBiPerson object
    /// <br/>
    /// <br/>FREG: Familierelasjon
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FamilyRelation
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FamilyRelation(bool? @isValid, FamilyRelationType? @myRoleForRelatedPerson, string @reason, System.DateTimeOffset? @registeredAt, string @relatedPerson, FamilyRelationType? @relatedPersonsRole, RelatedBiPerson @relatedPersonWithoutIdentifier, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.RelatedPerson = @relatedPerson;

            this.RelatedPersonWithoutIdentifier = @relatedPersonWithoutIdentifier;

            this.RelatedPersonsRole = @relatedPersonsRole;

            this.MyRoleForRelatedPerson = @myRoleForRelatedPerson;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// The identification number (nin or d-number) for the related person
        /// <br/>
        /// <br/>Remarks: Is null if RelatedPersonWithoutIdentifier is used
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("relatedPerson")]
        public string RelatedPerson { get; init; }

        /// <summary>
        /// Information about related person that does not have a valid identifier (nin or d-number)
        /// <br/>
        /// <br/>Remarks: Is null if RelatedPerson is used
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("relatedPersonWithoutIdentifier")]
        public RelatedBiPerson RelatedPersonWithoutIdentifier { get; init; }

        /// <summary>
        /// The relation type seen from the RelatedPerson or RelatedBiPersons view
        /// <br/>Freg: RelatertPersonsRolle
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("relatedPersonsRole")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FamilyRelationType? RelatedPersonsRole { get; init; }

        /// <summary>
        /// The relation type seen from the Persons view
        /// <br/>Freg: MinRolleForPerson
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("myRoleForRelatedPerson")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FamilyRelationType? MyRoleForRelatedPerson { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Familierelasjonstype&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Mother&lt;/i&gt; - FREG: Mor&lt;/li&gt;&lt;li&gt;&lt;i&gt;Father&lt;/i&gt; - FREG: Far&lt;/li&gt;&lt;li&gt;&lt;i&gt;CoMother&lt;/i&gt; - FREG: Medmor&lt;/li&gt;&lt;li&gt;&lt;i&gt;Child&lt;/i&gt; - FREG: Barn&lt;/li&gt;&lt;li&gt;&lt;i&gt;Sibling&lt;/i&gt; - FREG: Soesken&lt;/li&gt;&lt;li&gt;&lt;i&gt;SpouseOrPartner&lt;/i&gt; - FREG: EktefelleEllerPartner&lt;/li&gt;&lt;li&gt;&lt;i&gt;StillbornChild&lt;/i&gt; - FREG: DoedfoedtBarn&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FamilyRelationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Mother")]
        Mother = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Father")]
        Father = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CoMother")]
        CoMother = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Child")]
        Child = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Sibling")]
        Sibling = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SpouseOrPartner")]
        SpouseOrPartner = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"StillbornChild")]
        StillbornChild = 6,

    }

    /// <summary>
    /// 
    /// <br/>FREG: KontaktadresseIUtlandet
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ForeignContactAddress
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ForeignContactAddress(AddressConfidentiality? @addressConfidentiality, InternationalAddress @foreignAddress, FreeFormInternationalAddress @freeFormForeignAddress, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.AddressConfidentiality = @addressConfidentiality;

            this.ForeignAddress = @foreignAddress;

            this.FreeFormForeignAddress = @freeFormForeignAddress;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Adressegradering
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressConfidentiality")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AddressConfidentiality? AddressConfidentiality { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: UtenlandskAdresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreignAddress")]
        public InternationalAddress ForeignAddress { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: UtenlandskAdresseIFrittFormat
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("freeFormForeignAddress")]
        public FreeFormInternationalAddress FreeFormForeignAddress { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: InternasjonalAdresseIFrittFormat
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FreeFormInternationalAddress
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FreeFormInternationalAddress(System.Collections.Generic.ICollection<string> @addressLine, string @cityOrPlaceName, string @countryCode, string @postCode)

        {

            this.AddressLine = @addressLine;

            this.PostCode = @postCode;

            this.CityOrPlaceName = @cityOrPlaceName;

            this.CountryCode = @countryCode;

        }    /// <summary>
        /// Address lines
        /// <br/>
        /// <br/>FREG: Adresselinje
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine")]
        public System.Collections.Generic.ICollection<string> AddressLine { get; init; }

        /// <summary>
        /// Post code / zip code for each post area
        /// <br/>
        /// <br/>FREG: Postkode
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        public string PostCode { get; init; }

        /// <summary>
        /// Name of place or city
        /// <br/>
        /// <br/>FREG: ByEllerStedsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cityOrPlaceName")]
        public string CityOrPlaceName { get; init; }

        /// <summary>
        /// 2 letter Code used to represent a country
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>Uses ISO 3166-1 Alpha 2. XK = Kosovo.
        /// <br/>Freg: Landkode
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        public string CountryCode { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: PostadresseIFrittFormat
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FreeFormPostalAddress
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FreeFormPostalAddress(System.Collections.Generic.ICollection<string> @addressLine, System.Collections.Generic.ICollection<string> @adresselinje, City @city)

        {

            this.Adresselinje = @adresselinje;

            this.AddressLine = @addressLine;

            this.City = @city;

        }    /// <summary>
        /// 
        /// <br/>FREG: Adresselinje
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("adresselinje")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<string> Adresselinje { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Adresselinje
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine")]
        public System.Collections.Generic.ICollection<string> AddressLine { get; init; }

        /// <summary>
        /// Post location / city and zip code
        /// <br/>
        /// <br/>FREG: Poststed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public City City { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: AdresseIFrittFormat
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FreeformAddress
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FreeformAddress(System.Collections.Generic.ICollection<string> @addressLine, string @countryCode)

        {

            this.AddressLine = @addressLine;

            this.CountryCode = @countryCode;

        }    /// <summary>
        /// 
        /// <br/>FREG: Adresselinje
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine")]
        public System.Collections.Generic.ICollection<string> AddressLine { get; init; }

        /// <summary>
        /// Used for all countries including Norway.
        /// <br/>Country codes are given in ISO 3166-1 alfa 2, with the following extensions:
        /// <br/>            
        /// <br/>XK = Kosovo
        /// <br/>YY = Unknown
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        public string CountryCode { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Kjoenn&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Female&lt;/i&gt; - FREG: Kvinne&lt;/li&gt;&lt;li&gt;&lt;i&gt;Male&lt;/i&gt; - FREG: Mann&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Gender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Female")]
        Female = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Male")]
        Male = 1,

    }

    /// <summary>
    /// 
    /// <br/>FREG: VergeRepresentantEllerFullmektig
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GuardianOrProxy
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GuardianOrProxy(IdentifyingInformation @guardianInformation, System.Collections.Generic.ICollection<GuardianServiceArea> @guardianServiceArea, GuardianshipScope? @guardianshipScope, string @identificationNumber, bool? @isGuardianshipInPersonalScope, Name @name, PersonNameBirthDate @nameBirthDate)

        {

            this.Name = @name;

            this.IdentificationNumber = @identificationNumber;

            this.GuardianshipScope = @guardianshipScope;

            this.IsGuardianshipInPersonalScope = @isGuardianshipInPersonalScope;

            this.NameBirthDate = @nameBirthDate;

            this.GuardianInformation = @guardianInformation;

            this.GuardianServiceArea = @guardianServiceArea;

        }    /// <summary>
        /// 
        /// <br/>FREG: Navn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Name Name { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: FoedselsEllerDNummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identificationNumber")]
        public string IdentificationNumber { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Vergemaalsomfang
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("guardianshipScope")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GuardianshipScope? GuardianshipScope { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: OmfangetErInnenPersonligOmraade
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isGuardianshipInPersonalScope")]
        public bool? IsGuardianshipInPersonalScope { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: PersonNavnFoedselsdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nameBirthDate")]
        [System.Obsolete]
        public PersonNameBirthDate NameBirthDate { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: PersonNavnFoedselsdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("guardianInformation")]
        public IdentifyingInformation GuardianInformation { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: VergeTjenesteomraade
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("guardianServiceArea")]
        public System.Collections.Generic.ICollection<GuardianServiceArea> GuardianServiceArea { get; init; }

    }

    /// <summary>
    /// FREG: VergeTjenesteOmraade
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GuardianServiceArea
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GuardianServiceArea(string @guardianServiceEstablishment, string @guardianServiceTask)

        {

            this.GuardianServiceEstablishment = @guardianServiceEstablishment;

            this.GuardianServiceTask = @guardianServiceTask;

        }    /// <summary>
        /// FREG: VergeTjenesteVirksomhet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("guardianServiceEstablishment")]
        public string GuardianServiceEstablishment { get; init; }

        /// <summary>
        /// VergeTjenesteOppgave
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("guardianServiceTask")]
        public string GuardianServiceTask { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: VergemaalRepresentasjonEllerFremtidsfullmakt
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GuardianshipOrFuturePowerOfAttorney
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GuardianshipOrFuturePowerOfAttorney(GuardianOrProxy @guardian, GuardianshipType? @guardianshipType, bool? @isValid, string @office, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.GuardianshipType = @guardianshipType;

            this.Office = @office;

            this.Guardian = @guardian;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Vergemaaltype
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("guardianshipType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GuardianshipType? GuardianshipType { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Embete
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("office")]
        public string Office { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Verge
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("guardian")]
        public GuardianOrProxy Guardian { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Vergemaalsomfang&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;ImmigrationPersonalAndFinancialInterests&lt;/i&gt; - FREG: UtlendingssakerPersonligeOgOekonomiskeInteresser&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonalAndFinancialInterests&lt;/i&gt; - FREG: PersonligeOgOekonomiskeInteresser&lt;/li&gt;&lt;li&gt;&lt;i&gt;FinancialInterests&lt;/i&gt; - FREG: OekonomiskeInteresser&lt;/li&gt;&lt;li&gt;&lt;i&gt;PersonalInterests&lt;/i&gt; - FREG: PersonligeInteresser&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GuardianshipScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ImmigrationPersonalAndFinancialInterests")]
        ImmigrationPersonalAndFinancialInterests = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonalAndFinancialInterests")]
        PersonalAndFinancialInterests = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FinancialInterests")]
        FinancialInterests = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonalInterests")]
        PersonalInterests = 3,

    }

    /// <summary>
    /// 
    /// <br/>FREG: Vergemaaltype&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;SingleMinorAsylumSeeker&lt;/i&gt; - FREG: EnsligMindreaarigAsylsoeker&lt;/li&gt;&lt;li&gt;&lt;i&gt;SingleMinorRefugee&lt;/i&gt; - FREG: EnsligMindreaarigFlyktning&lt;/li&gt;&lt;li&gt;&lt;i&gt;Adult&lt;/i&gt; - FREG: Voksen&lt;/li&gt;&lt;li&gt;&lt;i&gt;TemporaryForAdult&lt;/i&gt; - FREG: MidlertidigForVoksen&lt;/li&gt;&lt;li&gt;&lt;i&gt;Minor&lt;/i&gt; - FREG: Mindreaarig&lt;/li&gt;&lt;li&gt;&lt;i&gt;TemporaryForMinor&lt;/i&gt; - FREG: MidlertidigForMindreaarig&lt;/li&gt;&lt;li&gt;&lt;i&gt;ManagementOutsideGuardianship&lt;/i&gt; - FREG: ForvaltningUtenforVergemaal&lt;/li&gt;&lt;li&gt;&lt;i&gt;ConfirmedFuturePowerOfAttorney&lt;/i&gt; - FREG: StadfestetFremtidsfullmakt&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GuardianshipType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SingleMinorAsylumSeeker")]
        SingleMinorAsylumSeeker = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SingleMinorRefugee")]
        SingleMinorRefugee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Adult")]
        Adult = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TemporaryForAdult")]
        TemporaryForAdult = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Minor")]
        Minor = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TemporaryForMinor")]
        TemporaryForMinor = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ManagementOutsideGuardianship")]
        ManagementOutsideGuardianship = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ConfirmedFuturePowerOfAttorney")]
        ConfirmedFuturePowerOfAttorney = 7,

    }

    /// <summary>
    /// Identification Document contains information on what documentation
    /// <br/>was used to verify the identity of the person
    /// <br/>
    /// <br/>FREG: Identifikasjonsdokument / Legitimasjonsdokument
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record IdentificationDocument
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public IdentificationDocument(string @documentNumber, string @documentType, System.DateTimeOffset? @documentValidFrom, System.DateTimeOffset? @documentValidTo, DocumentVerification @documentVerification, string @issuerCountry, string @issuerName, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.DocumentNumber = @documentNumber;

            this.DocumentType = @documentType;

            this.IssuerCountry = @issuerCountry;

            this.IssuerName = @issuerName;

            this.DocumentValidFrom = @documentValidFrom;

            this.DocumentValidTo = @documentValidTo;

            this.DocumentVerification = @documentVerification;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// Identification number on the document used for identity verification
        /// <br/>I.e. a passport number
        /// <br/>
        /// <br/>FREG: Identifikasjondokumentnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentNumber")]
        public string DocumentNumber { get; init; }

        /// <summary>
        /// Type of documentation.
        /// <br/>I.e. driver license or passport
        /// <br/>
        /// <br/>FREG: Identifikasjondokumenttype
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentType")]
        public string DocumentType { get; init; }

        /// <summary>
        /// Name of the country the document is issued in
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>Newest updates uses ISO 3166-1 Alpha 3 for country codes
        /// <br/>XXK = Kosovo even if document contains "RKS"
        /// <br/>Freg: Utstederland
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuerCountry")]
        public string IssuerCountry { get; init; }

        /// <summary>
        /// Name of the issuer
        /// <br/>
        /// <br/>FREG: Utstedernavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuerName")]
        public string IssuerName { get; init; }

        /// <summary>
        /// Time and date document is valid from
        /// <br/>
        /// <br/>FREG: GyldigFra
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentValidFrom")]
        public System.DateTimeOffset? DocumentValidFrom { get; init; }

        /// <summary>
        /// Time and date document is valid to
        /// <br/>
        /// <br/>FREG: GyldigTil
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentValidTo")]
        public System.DateTimeOffset? DocumentValidTo { get; init; }

        /// <summary>
        /// What kind of technical control is done on the document.
        /// <br/>I.e. "Keesing-machine" or other methods
        /// <br/>
        /// <br/>FREG: Dokumentkontroll
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentVerification")]
        public DocumentVerification DocumentVerification { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Identifikatorstatuskode&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;InUse&lt;/i&gt; - FREG: IBruk&lt;/li&gt;&lt;li&gt;&lt;i&gt;Discontinued&lt;/i&gt; - FREG: Opphoert&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentificationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"InUse")]
        InUse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Discontinued")]
        Discontinued = 1,

    }

    /// <summary>
    /// 
    /// <br/>FREG: IdentifiserendeInformasjon
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record IdentifyingInformation
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public IdentifyingInformation(System.DateTimeOffset? @birthDate, System.Collections.Generic.ICollection<string> @citizenship, Gender? @gender, Name @personName)

        {

            this.PersonName = @personName;

            this.BirthDate = @birthDate;

            this.Citizenship = @citizenship;

            this.Gender = @gender;

        }    /// <summary>
        /// 
        /// <br/>FREG: Personnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("personName")]
        public Name PersonName { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Foedselsdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]
        public System.DateTimeOffset? BirthDate { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Statsborgerskap
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("citizenship")]
        public System.Collections.Generic.ICollection<string> Citizenship { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kjoenn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Gender? Gender { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Identitetsgrunnlag
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record IdentityVerification
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public IdentityVerification(IdentityVerificationStatus? @identityVerificationStatus, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.IdentityVerificationStatus = @identityVerificationStatus;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// Category of verification for the underlying identity
        /// <br/>
        /// <br/>FREG: Identitetsgrunnlagstatus
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identityVerificationStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IdentityVerificationStatus? IdentityVerificationStatus { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Identitetsgrunnlagstatus&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;None&lt;/i&gt; - FREG: IngenStatus&lt;/li&gt;&lt;li&gt;&lt;i&gt;NotVerified&lt;/i&gt; - FREG: IkkeKontrollert&lt;/li&gt;&lt;li&gt;&lt;i&gt;Verified&lt;/i&gt; - FREG: Kontrollert&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentityVerificationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotVerified")]
        NotVerified = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Verified")]
        Verified = 2,

    }

    /// <summary>
    /// Information on the country and city of residence of the person before immigration to norway.
    /// <br/>Country codes are given in ISO 3166-1 alfa 3
    /// <br/>
    /// <br/>FREG: InnflyttingTilNorge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ImmigrationToNorway
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ImmigrationToNorway(string @immigratedFromCity, string @immigratedFromCountry, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.ImmigratedFromCountry = @immigratedFromCountry;

            this.ImmigratedFromCity = @immigratedFromCity;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Fraflyttingsland
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("immigratedFromCountry")]
        public string ImmigratedFromCountry { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: FraflyttingsstedIUtland
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("immigratedFromCity")]
        public string ImmigratedFromCity { get; init; }

    }

    /// <summary>
    /// Information parts available for filtering&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;AddressProtection&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;CitizenshipRetention&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;ResidentialAddress&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;UseOfSamiLanguage&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;SharedResidence&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;Death&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;FalseIdentity&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;FamilyRelation&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;Birth&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;BirthInNorway&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;ParentalResponsibility&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;SamiParliamentElectoralRegistryStatus&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;NorwegianIdentificationNumber&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;IdentityVerification&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;ImmigrationToNorway&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;Gender&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;ResiduaryEstateContactInformation&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;IdentificationDocument&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;Name&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;ResidencePermit&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;StayOnSvalbard&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;PresentAddress&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;PostalAddress&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;ForeignPostalAddress&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;PreferredContactAddress&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;MaritalStatus&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;Citizenship&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;Status&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;ForeignPersonIdentificationNumber&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;EmigrationFromNorway&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;ImmigrationAuthoritiesIdentificationNumber&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;GuardianshipOrFuturePowerOfAttorney&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;DeprivedLegalAuthority&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;CommonContactRegisterInformation&lt;/i&gt; - Show&lt;/li&gt;&lt;li&gt;&lt;i&gt;LegalAuthority&lt;/i&gt; - Show&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InformationPart
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AddressProtection")]
        AddressProtection = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CitizenshipRetention")]
        CitizenshipRetention = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ResidentialAddress")]
        ResidentialAddress = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UseOfSamiLanguage")]
        UseOfSamiLanguage = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SharedResidence")]
        SharedResidence = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Death")]
        Death = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FalseIdentity")]
        FalseIdentity = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FamilyRelation")]
        FamilyRelation = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Birth")]
        Birth = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"BirthInNorway")]
        BirthInNorway = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ParentalResponsibility")]
        ParentalResponsibility = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SamiParliamentElectoralRegistryStatus")]
        SamiParliamentElectoralRegistryStatus = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"NorwegianIdentificationNumber")]
        NorwegianIdentificationNumber = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"IdentityVerification")]
        IdentityVerification = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ImmigrationToNorway")]
        ImmigrationToNorway = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Gender")]
        Gender = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ResiduaryEstateContactInformation")]
        ResiduaryEstateContactInformation = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"IdentificationDocument")]
        IdentificationDocument = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Name")]
        Name = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ResidencePermit")]
        ResidencePermit = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"StayOnSvalbard")]
        StayOnSvalbard = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"PresentAddress")]
        PresentAddress = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"PostalAddress")]
        PostalAddress = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ForeignPostalAddress")]
        ForeignPostalAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"PreferredContactAddress")]
        PreferredContactAddress = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"MaritalStatus")]
        MaritalStatus = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Citizenship")]
        Citizenship = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Status")]
        Status = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"ForeignPersonIdentificationNumber")]
        ForeignPersonIdentificationNumber = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"EmigrationFromNorway")]
        EmigrationFromNorway = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"ImmigrationAuthoritiesIdentificationNumber")]
        ImmigrationAuthoritiesIdentificationNumber = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"GuardianshipOrFuturePowerOfAttorney")]
        GuardianshipOrFuturePowerOfAttorney = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"DeprivedLegalAuthority")]
        DeprivedLegalAuthority = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"CommonContactRegisterInformation")]
        CommonContactRegisterInformation = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"LegalAuthority")]
        LegalAuthority = 34,

    }

    /// <summary>
    /// International address
    /// <br/>
    /// <br/>FREG: InternasjonalAdresse
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InternationalAddress
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public InternationalAddress(string @addressName, string @building, string @cityOrPlaceName, string @coAddressName, string @countryCode, string @districtName, string @floorNumber, string @housingUnit, string @postBox, string @postCode, string @region)

        {

            this.CoAddressName = @coAddressName;

            this.AddressName = @addressName;

            this.Building = @building;

            this.FloorNumber = @floorNumber;

            this.HousingUnit = @housingUnit;

            this.PostBox = @postBox;

            this.PostCode = @postCode;

            this.CityOrPlaceName = @cityOrPlaceName;

            this.DistrictName = @districtName;

            this.Region = @region;

            this.CountryCode = @countryCode;

        }    /// <summary>
        /// Description of who the recipient is in care of (C/O),
        /// <br/>or which recipient in an organization (v/ = with, or Att: = "Attention")
        /// <br/>
        /// <br/>FREG: CoAdressenavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("coAddressName")]
        public string CoAddressName { get; init; }

        /// <summary>
        /// Name of a street, road, path, place or area
        /// <br/>as registered in the cadastral of a municipality
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>Address number (housing number and lettering) may be included
        /// <br/>Freg: Adressenavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressName")]
        public string AddressName { get; init; }

        /// <summary>
        /// Describes name and/or number of a building
        /// <br/>
        /// <br/>FREG: Bygning
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("building")]
        public string Building { get; init; }

        /// <summary>
        /// Described which floor the registered address is located in
        /// <br/>
        /// <br/>FREG: Etasjenummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("floorNumber")]
        public string FloorNumber { get; init; }

        /// <summary>
        /// Address property describing what kind of habitat or
        /// <br/>business is registered, and a unique identifier within
        /// <br/>the building / floor
        /// <br/>
        /// <br/>FREG: Boenhet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("housingUnit")]
        public string HousingUnit { get; init; }

        /// <summary>
        /// Post box identifier
        /// <br/>
        /// <br/>FREG: Postboks
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postBox")]
        public string PostBox { get; init; }

        /// <summary>
        /// Post code / zip code for each post area
        /// <br/>
        /// <br/>FREG: Postkode
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        public string PostCode { get; init; }

        /// <summary>
        /// Name of place or city
        /// <br/>
        /// <br/>FREG: ByEllerStedsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cityOrPlaceName")]
        public string CityOrPlaceName { get; init; }

        /// <summary>
        /// District inside a country or part of a city
        /// <br/>
        /// <br/>FREG: Distriktsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("districtName")]
        public string DistrictName { get; init; }

        /// <summary>
        /// Large geographical area part of a country
        /// <br/>
        /// <br/>FREG: Region
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("region")]
        public string Region { get; init; }

        /// <summary>
        /// 2 letter Code used to represent a country
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>Uses ISO 3166-1 Alpha 2. XK = Kosovo.
        /// <br/>Freg: Landkode
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        public string CountryCode { get; init; }

    }

    /// <summary>
    /// Contact information for a Lawyer
    /// <br/>
    /// <br/>FREG: AdvokatSomKontakt
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LawyerAsContact
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public LawyerAsContact(string @organizationName, string @organizationNumber, Name @personName)

        {

            this.PersonName = @personName;

            this.OrganizationName = @organizationName;

            this.OrganizationNumber = @organizationNumber;

        }    /// <summary>
        /// Contact person
        /// <br/>
        /// <br/>FREG: Personnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("personName")]
        public Name PersonName { get; init; }

        /// <summary>
        /// Name of organization, may be foreign
        /// <br/>
        /// <br/>FREG: Organisasjonsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("organizationName")]
        public string OrganizationName { get; init; }

        /// <summary>
        /// Norwegian organization number, must be 9 digits and start with 8 or 9
        /// <br/>
        /// <br/>FREG: Organisasjonsnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("organizationNumber")]
        public string OrganizationNumber { get; init; }

    }

    /// <summary>
    /// Freg: RettsligHandleevne
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LegalAuthority
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public LegalAuthority(bool? @isValid, LegalAuthorityScope? @legalAuthorityScope, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.LegalAuthorityScope = @legalAuthorityScope;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// Freg: RettsligHandleevneomfang
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("legalAuthorityScope")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public LegalAuthorityScope? LegalAuthorityScope { get; init; }

    }

    /// <summary>
    /// Freg: RettsligHandleevneomfang&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Limited&lt;/i&gt; - Freg: Begrenset&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LegalAuthorityScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Limited")]
        Limited = 0,

    }

    /// <summary>
    /// 
    /// <br/>FREG: OppholdsvarighetType&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;UnderSixMonths&lt;/i&gt; - FREG: UnderSeksMaaneder&lt;/li&gt;&lt;li&gt;&lt;i&gt;OverSixMonths&lt;/i&gt; - FREG: OverSeksMaaneder&lt;/li&gt;&lt;li&gt;&lt;i&gt;OverTwelveMonths&lt;/i&gt; - FREG: OverTolvMaaneder&lt;/li&gt;&lt;li&gt;&lt;i&gt;Unknown&lt;/i&gt; - FREG: Ukjent&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LengthOfStay
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UnderSixMonths")]
        UnderSixMonths = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OverSixMonths")]
        OverSixMonths = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OverTwelveMonths")]
        OverTwelveMonths = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 3,

    }

    /// <summary>
    /// Martial status
    /// <br/>
    /// <br/>FREG: Sivilstand
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record MaritalStatus
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public MaritalStatus(string @abroad, string @authority, string @countyName, string @countyNumber, bool? @isValid, string @municipalityName, string @municipalityNumber, string @place, string @reason, System.DateTimeOffset? @registeredAt, string @relatedByMaritalStatus, string @source, MaritalStatusType? @status, System.DateTimeOffset? @statusDate, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.Status = @status;

            this.StatusDate = @statusDate;

            this.Authority = @authority;

            this.MunicipalityNumber = @municipalityNumber;

            this.MunicipalityName = @municipalityName;

            this.CountyNumber = @countyNumber;

            this.CountyName = @countyName;

            this.Place = @place;

            this.Abroad = @abroad;

            this.RelatedByMaritalStatus = @relatedByMaritalStatus;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// Marital status type
        /// <br/>
        /// <br/>FREG: Sivilstand
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MaritalStatusType? Status { get; init; }

        /// <summary>
        /// Date of  the marial status
        /// <br/>
        /// <br/>FREG: SivilstandDato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusDate")]
        public System.DateTimeOffset? StatusDate { get; init; }

        /// <summary>
        /// Code value for which authority that has granted the marital status
        /// <br/>If the source of the Marital Status is DSF, the current values:
        /// <br/>DSF er denne verdien representert med vigselstype (VIGSELSTYPE)
        /// <br/>1 = The Norwegian Church
        /// <br/>2 = Civil
        /// <br/>3 = Dissenter for  a non-established Church or other denominations with marital rights
        /// <br/>4 = Abroad - Foreign authority
        /// <br/>Updated 2021.10.14
        /// <br/>
        /// <br/>FREG: Myndighet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authority")]
        public string Authority { get; init; }

        /// <summary>
        /// A four digit code identifying the municipality where the marital status was changed.
        /// <br/>Municipalities are defined by SSB in classification 131.
        /// <br/>&lt;see href="https://www.ssb.no/klass/klassifikasjoner/131" /&gt;
        /// <br/>FREG: Kommune
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("municipalityNumber")]
        public string MunicipalityNumber { get; init; }

        /// <summary>
        /// The name of the municipality. Some municipalities also include names in Sámi languages.
        /// <br/>
        /// <br/>SSB: Kommunenavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("municipalityName")]
        public string MunicipalityName { get; init; }

        /// <summary>
        /// A number identifying a county 
        /// <br/>
        /// <br/>SSB: Fylkesnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countyNumber")]
        public string CountyNumber { get; init; }

        /// <summary>
        /// A name identifying a county
        /// <br/>
        /// <br/>SSB: Fylkesnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countyName")]
        public string CountyName { get; init; }

        /// <summary>
        /// Name of the place in Norway or abroad where the status change was made.
        /// <br/>May be an address or less exact
        /// <br/>
        /// <br/>FREG: Sted
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("place")]
        public string Place { get; init; }

        /// <summary>
        /// Name of country if happened abroad
        /// <br/>
        /// <br/>FREG: Utland
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("abroad")]
        public string Abroad { get; init; }

        /// <summary>
        /// NIN for person related by marital status
        /// <br/>
        /// <br/>FREG: RelatertVedSivilstatus
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("relatedByMaritalStatus")]
        public string RelatedByMaritalStatus { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Sivilstandstype&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Unspecified&lt;/i&gt; - FREG: Uoppgitt&lt;/li&gt;&lt;li&gt;&lt;i&gt;Unmarried&lt;/i&gt; - FREG: Ugift&lt;/li&gt;&lt;li&gt;&lt;i&gt;Married&lt;/i&gt; - FREG: Gift&lt;/li&gt;&lt;li&gt;&lt;i&gt;WidowOrWidower&lt;/i&gt; - FREG: EnkeEllerEnkemann&lt;/li&gt;&lt;li&gt;&lt;i&gt;Divorced&lt;/i&gt; - FREG: Skilt&lt;/li&gt;&lt;li&gt;&lt;i&gt;Separated&lt;/i&gt; - FREG: Separert&lt;/li&gt;&lt;li&gt;&lt;i&gt;RegisteredPartner&lt;/i&gt; - FREG: RegistrertPartner&lt;/li&gt;&lt;li&gt;&lt;i&gt;SeparatedPartner&lt;/i&gt; - FREG: SeparertPartner&lt;/li&gt;&lt;li&gt;&lt;i&gt;DivorcedPartner&lt;/i&gt; - FREG: SkiltPartner&lt;/li&gt;&lt;li&gt;&lt;i&gt;SurvivingPartner&lt;/i&gt; - FREG: GjenlevendePartner&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MaritalStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unspecified")]
        Unspecified = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Unmarried")]
        Unmarried = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Married")]
        Married = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WidowOrWidower")]
        WidowOrWidower = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Divorced")]
        Divorced = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Separated")]
        Separated = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"RegisteredPartner")]
        RegisteredPartner = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SeparatedPartner")]
        SeparatedPartner = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DivorcedPartner")]
        DivorcedPartner = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SurvivingPartner")]
        SurvivingPartner = 9,

    }

    /// <summary>
    /// 
    /// <br/>FREG: Personnavn
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Name
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Name(string @familyName, string @givenName, string @middleName)

        {

            this.GivenName = @givenName;

            this.MiddleName = @middleName;

            this.FamilyName = @familyName;

        }    /// <summary>
        /// 
        /// <br/>FREG: Fornavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("givenName")]
        public string GivenName { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Mellomnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("middleName")]
        public string MiddleName { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Etternavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("familyName")]
        public string FamilyName { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: BibeholdAvNorskStatsborgerskap
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record NorwegianCitizenshipRetention
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public NorwegianCitizenshipRetention(CitizenshipRetentionStatus? @citizenshipRetentionStatus, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, System.DateTimeOffset? @retentionResolutionDate, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.CitizenshipRetentionStatus = @citizenshipRetentionStatus;

            this.RetentionResolutionDate = @retentionResolutionDate;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Bibeholdstatus
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("citizenshipRetentionStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CitizenshipRetentionStatus? CitizenshipRetentionStatus { get; init; }

        /// <summary>
        /// The resolution date of retention of norwegian citizenship
        /// <br/>
        /// <br/>FREG: DatoForBibehold
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("retentionResolutionDate")]
        public System.DateTimeOffset? RetentionResolutionDate { get; init; }

    }

    /// <summary>
    /// Information on norwegian identification numbers for this person.
    /// <br/>This includes both national identity numbers (fødselsnummer) and D-numbers (d-nummer)
    /// <br/>
    /// <br/>FREG: Folkeregisteridentifikator
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record NorwegianIdentificationNumber
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public NorwegianIdentificationNumber(string @identificationNumber, NorwegianIdentificationNumberType? @identificationNumberType, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, IdentificationStatus? @status, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.Status = @status;

            this.IdentificationNumber = @identificationNumber;

            this.IdentificationNumberType = @identificationNumberType;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Status
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IdentificationStatus? Status { get; init; }

        /// <summary>
        /// National identity number (fødselsnummer) or D-number (d-nummer)
        /// <br/>
        /// <br/>FREG: FoedselsEllerDNummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identificationNumber")]
        public string IdentificationNumber { get; init; }

        /// <summary>
        /// The type of identification number.
        /// <br/>
        /// <br/>FREG: Identifikatortype
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identificationNumberType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NorwegianIdentificationNumberType? IdentificationNumberType { get; init; }

    }

    /// <summary>
    /// Types of identification numbers used in the Person API.
    /// <br/>
    /// <br/>FREG: Folkeregisteridentifikatortype&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;NationalIdentityNumber&lt;/i&gt; - National identity number (fødselsnummer). OID: 2.16.578.1.12.4.1.4.1
    /// <br/>            FREG: Foedselsnummer&lt;/li&gt;&lt;li&gt;&lt;i&gt;DNumber&lt;/i&gt; - D-number (D-nummer). OID: 2.16.578.1.12.4.1.4.2
    /// <br/>            FREG: DNummer&lt;/li&gt;&lt;li&gt;&lt;i&gt;AlternateIdentificationNumber&lt;/i&gt; - Alternate identification number. OID: 2.16.578.1.12.4.1.4.3
    /// <br/>            NHN: FellesHjelpenummer&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NorwegianIdentificationNumberType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NationalIdentityNumber")]
        NationalIdentityNumber = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DNumber")]
        DNumber = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AlternateIdentificationNumber")]
        AlternateIdentificationNumber = 2,

    }

    /// <summary>
    /// 
    /// <br/>KRR: varslingsstatus&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;CanNotBeNotified&lt;/i&gt; - KRR: KAN_IKKE_VARSLES&lt;/li&gt;&lt;li&gt;&lt;i&gt;CanBeNotified&lt;/i&gt; - KRR: KAN_VARSLES&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NotificationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CanNotBeNotified")]
        CanNotBeNotified = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CanBeNotified")]
        CanBeNotified = 1,

    }

    /// <summary>
    /// Organization as contact
    /// <br/>Used in Residuary estate, if there is an organization that takes care of the estate
    /// <br/>
    /// <br/>FREG: OrganisasjonSomKontakt
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OrganizationAsContact
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OrganizationAsContact(Name @contactPersonName, string @organizationName, string @organizationNumber)

        {

            this.OrganizationName = @organizationName;

            this.OrganizationNumber = @organizationNumber;

            this.ContactPersonName = @contactPersonName;

        }    /// <summary>
        /// Name of organization, may be foreign
        /// <br/>
        /// <br/>FREG: Organisasjonsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("organizationName")]
        public string OrganizationName { get; init; }

        /// <summary>
        /// Norwegian organization number, must be 9 digits and start with 8 or 9
        /// <br/>
        /// <br/>FREG: Organisasjonsnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("organizationNumber")]
        public string OrganizationNumber { get; init; }

        /// <summary>
        /// Contact person
        /// <br/>
        /// <br/>FREG: Kontaktpersonnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonName")]
        public Name ContactPersonName { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Foreldreansvar
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ParentalResponsibility
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ParentalResponsibility(bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, ParentalResponsibilityType? @responsibilityType, string @responsible, string @responsibleOrganization, RelatedBiPerson @responsibleWithoutIdentifier, string @source, string @subjectOfResponsibility, RelatedBiPerson @subjectOfResponsibilityWithoutIdentifier, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.ResponsibilityType = @responsibilityType;

            this.SubjectOfResponsibility = @subjectOfResponsibility;

            this.Responsible = @responsible;

            this.ResponsibleOrganization = @responsibleOrganization;

            this.ResponsibleWithoutIdentifier = @responsibleWithoutIdentifier;

            this.SubjectOfResponsibilityWithoutIdentifier = @subjectOfResponsibilityWithoutIdentifier;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Ansvar
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("responsibilityType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ParentalResponsibilityType? ResponsibilityType { get; init; }

        /// <summary>
        /// The identification number (nin or d-number) of the subject of responsibility
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subjectOfResponsibility")]
        public string SubjectOfResponsibility { get; init; }

        /// <summary>
        /// The identification number (nin or d-number) of the person responsible for the subject
        /// <br/>
        /// <br/>FREG: Ansvarlig
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("responsible")]
        public string Responsible { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: AnsvarligOrganisasjon
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("responsibleOrganization")]
        public string ResponsibleOrganization { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: AnsvarligUtenIdentifikator
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("responsibleWithoutIdentifier")]
        public RelatedBiPerson ResponsibleWithoutIdentifier { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: AnsvarssubjektUtenIdentifikator
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subjectOfResponsibilityWithoutIdentifier")]
        public RelatedBiPerson SubjectOfResponsibilityWithoutIdentifier { get; init; }

    }

    /// <summary>
    /// Types of parental responsibility
    /// <br/>
    /// <br/>FREG: Foreldreansvarstype&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Joint&lt;/i&gt; - FREG: Felles&lt;/li&gt;&lt;li&gt;&lt;i&gt;Mother&lt;/i&gt; - FREG: Mor&lt;/li&gt;&lt;li&gt;&lt;i&gt;Father&lt;/i&gt; - FREG: Far&lt;/li&gt;&lt;li&gt;&lt;i&gt;CoMother&lt;/i&gt; - FREG: Medmor&lt;/li&gt;&lt;li&gt;&lt;i&gt;Other&lt;/i&gt; - FREG: Andre&lt;/li&gt;&lt;li&gt;&lt;i&gt;Unknown&lt;/i&gt; - FREG: Ukjent&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParentalResponsibilityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Joint")]
        Joint = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Mother")]
        Mother = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Father")]
        Father = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CoMother")]
        CoMother = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Person
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Person(System.Collections.Generic.ICollection<AddressProtection> @addressProtection, System.Collections.Generic.ICollection<Birth> @birth, System.Collections.Generic.ICollection<BirthInNorway> @birthInNorway, System.Collections.Generic.ICollection<Citizenship> @citizenship, System.Collections.Generic.ICollection<NorwegianCitizenshipRetention> @citizenshipRetention, CommonContactRegisterInformation @commonContactRegisterInformation, Death @death, System.Collections.Generic.ICollection<DeprivedLegalAuthority> @deprivedLegalAuthority, System.Collections.Generic.ICollection<EmigrationFromNorway> @emigrationFromNorway, FalseIdentity @falseIdentity, System.Collections.Generic.ICollection<FamilyRelation> @familyRelation, System.Collections.Generic.ICollection<PersonIdentification> @foreignPersonIdentificationNumber, System.Collections.Generic.ICollection<ForeignContactAddress> @foreignPostalAddress, System.Collections.Generic.ICollection<PersonGender> @gender, System.Collections.Generic.ICollection<GuardianshipOrFuturePowerOfAttorney> @guardianshipOrFuturePowerOfAttorney, string @id, System.Collections.Generic.ICollection<IdentificationDocument> @identificationDocument, System.Collections.Generic.ICollection<IdentityVerification> @identityVerification, System.Collections.Generic.ICollection<PersonIdentification> @immigrationAuthoritiesIdentificationNumber, System.Collections.Generic.ICollection<ImmigrationToNorway> @immigrationToNorway, System.Collections.Generic.ICollection<LegalAuthority> @legalAuthority, System.Collections.Generic.ICollection<MaritalStatus> @maritalStatus, System.Collections.Generic.ICollection<PersonName> @name, System.Collections.Generic.ICollection<NorwegianIdentificationNumber> @norwegianIdentificationNumber, System.Collections.Generic.ICollection<ParentalResponsibility> @parentalResponsibility, System.Collections.Generic.ICollection<ContactAddress> @postalAddress, System.Collections.Generic.ICollection<PreferredContactAddress> @preferredContactAddress, System.Collections.Generic.ICollection<PresentAddress> @presentAddress, System.Collections.Generic.ICollection<ResidencePermit> @residencePermit, System.Collections.Generic.ICollection<ResidentialAddress> @residentialAddress, System.Collections.Generic.ICollection<ResiduaryEstateContactInformation> @residuaryEstateContactInformation, System.Collections.Generic.ICollection<SamiParliamentElectoralRegistry> @samiParliamentElectoralRegistryStatus, long? @sequenceNumber, System.Collections.Generic.ICollection<SharedResidence> @sharedResidence, System.Collections.Generic.ICollection<PersonStatus> @status, System.Collections.Generic.ICollection<StayOnSvalbard> @stayOnSvalbard, System.Collections.Generic.ICollection<SamiLanguage> @useOfSamiLanguage)

        {

            this.FalseIdentity = @falseIdentity;

            this.NorwegianIdentificationNumber = @norwegianIdentificationNumber;

            this.IdentityVerification = @identityVerification;

            this.ResiduaryEstateContactInformation = @residuaryEstateContactInformation;

            this.IdentificationDocument = @identificationDocument;

            this.Status = @status;

            this.ImmigrationAuthoritiesIdentificationNumber = @immigrationAuthoritiesIdentificationNumber;

            this.ForeignPersonIdentificationNumber = @foreignPersonIdentificationNumber;

            this.SharedResidence = @sharedResidence;

            this.Gender = @gender;

            this.Birth = @birth;

            this.BirthInNorway = @birthInNorway;

            this.FamilyRelation = @familyRelation;

            this.MaritalStatus = @maritalStatus;

            this.Death = @death;

            this.Name = @name;

            this.AddressProtection = @addressProtection;

            this.ResidentialAddress = @residentialAddress;

            this.PresentAddress = @presentAddress;

            this.ImmigrationToNorway = @immigrationToNorway;

            this.EmigrationFromNorway = @emigrationFromNorway;

            this.UseOfSamiLanguage = @useOfSamiLanguage;

            this.SamiParliamentElectoralRegistryStatus = @samiParliamentElectoralRegistryStatus;

            this.PreferredContactAddress = @preferredContactAddress;

            this.PostalAddress = @postalAddress;

            this.ForeignPostalAddress = @foreignPostalAddress;

            this.ParentalResponsibility = @parentalResponsibility;

            this.Citizenship = @citizenship;

            this.CitizenshipRetention = @citizenshipRetention;

            this.ResidencePermit = @residencePermit;

            this.StayOnSvalbard = @stayOnSvalbard;

            this.GuardianshipOrFuturePowerOfAttorney = @guardianshipOrFuturePowerOfAttorney;

            this.DeprivedLegalAuthority = @deprivedLegalAuthority;

            this.LegalAuthority = @legalAuthority;

            this.CommonContactRegisterInformation = @commonContactRegisterInformation;

            this.Id = @id;

            this.SequenceNumber = @sequenceNumber;

        }    /// <summary>
        /// 
        /// <br/>FREG: FalskIdentitet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("falseIdentity")]
        public FalseIdentity FalseIdentity { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Identifikasjonsnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("norwegianIdentificationNumber")]
        public System.Collections.Generic.ICollection<NorwegianIdentificationNumber> NorwegianIdentificationNumber { get; init; }

        /// <summary>
        /// If empty, is the same as IdentityVerificationStatus.None
        /// <br/>FREG: Identitetsgrunnlag
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identityVerification")]
        public System.Collections.Generic.ICollection<IdentityVerification> IdentityVerification { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: KontaktinformasjonForDoedsbo
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("residuaryEstateContactInformation")]
        public System.Collections.Generic.ICollection<ResiduaryEstateContactInformation> ResiduaryEstateContactInformation { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Legitimasjonsdokument
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identificationDocument")]
        public System.Collections.Generic.ICollection<IdentificationDocument> IdentificationDocument { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Status
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public System.Collections.Generic.ICollection<PersonStatus> Status { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: UtlendingsmyndighetenesIdentifikasjonsnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("immigrationAuthoritiesIdentificationNumber")]
        public System.Collections.Generic.ICollection<PersonIdentification> ImmigrationAuthoritiesIdentificationNumber { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: UtenlandskPersonidentifikasjon
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreignPersonIdentificationNumber")]
        public System.Collections.Generic.ICollection<PersonIdentification> ForeignPersonIdentificationNumber { get; init; }

        /// <summary>
        /// List may only contain 0 or 1 element
        /// <br/>
        /// <br/>FREG: DeltBosted
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sharedResidence")]
        public System.Collections.Generic.ICollection<SharedResidence> SharedResidence { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kjoenn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public System.Collections.Generic.ICollection<PersonGender> Gender { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Foedsel
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birth")]
        public System.Collections.Generic.ICollection<Birth> Birth { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: FoedselINorge
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthInNorway")]
        public System.Collections.Generic.ICollection<BirthInNorway> BirthInNorway { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Familierelasjon
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("familyRelation")]
        public System.Collections.Generic.ICollection<FamilyRelation> FamilyRelation { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Sivilstand
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maritalStatus")]
        public System.Collections.Generic.ICollection<MaritalStatus> MaritalStatus { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Doedsfall
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("death")]
        public Death Death { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Navn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public System.Collections.Generic.ICollection<PersonName> Name { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Adressebeskyttelse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressProtection")]
        public System.Collections.Generic.ICollection<AddressProtection> AddressProtection { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Bostedsadresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("residentialAddress")]
        public System.Collections.Generic.ICollection<ResidentialAddress> ResidentialAddress { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Oppholdsadresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("presentAddress")]
        public System.Collections.Generic.ICollection<PresentAddress> PresentAddress { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Innflytting
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("immigrationToNorway")]
        public System.Collections.Generic.ICollection<ImmigrationToNorway> ImmigrationToNorway { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Utflytting
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emigrationFromNorway")]
        public System.Collections.Generic.ICollection<EmigrationFromNorway> EmigrationFromNorway { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: BrukAvSamiskSpraak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("useOfSamiLanguage")]
        public System.Collections.Generic.ICollection<SamiLanguage> UseOfSamiLanguage { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ForholdTilSametingetsValgmanntall
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("samiParliamentElectoralRegistryStatus")]
        public System.Collections.Generic.ICollection<SamiParliamentElectoralRegistry> SamiParliamentElectoralRegistryStatus { get; init; }

        /// <summary>
        /// Will be removed with deprecation of API v1.0
        /// <br/>
        /// <br/>FREG: PreferertKontaktadresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("preferredContactAddress")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<PreferredContactAddress> PreferredContactAddress { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Postadresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postalAddress")]
        public System.Collections.Generic.ICollection<ContactAddress> PostalAddress { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: PostadresseIUtlandet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreignPostalAddress")]
        public System.Collections.Generic.ICollection<ForeignContactAddress> ForeignPostalAddress { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Foreldreansvar
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentalResponsibility")]
        public System.Collections.Generic.ICollection<ParentalResponsibility> ParentalResponsibility { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Statsborgerskap
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("citizenship")]
        public System.Collections.Generic.ICollection<Citizenship> Citizenship { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Bibehold
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("citizenshipRetention")]
        public System.Collections.Generic.ICollection<NorwegianCitizenshipRetention> CitizenshipRetention { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphold
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("residencePermit")]
        public System.Collections.Generic.ICollection<ResidencePermit> ResidencePermit { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: OppholdPaaSvalbard
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stayOnSvalbard")]
        public System.Collections.Generic.ICollection<StayOnSvalbard> StayOnSvalbard { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: VergemaalEllerFremtidsfullmakt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("guardianshipOrFuturePowerOfAttorney")]
        public System.Collections.Generic.ICollection<GuardianshipOrFuturePowerOfAttorney> GuardianshipOrFuturePowerOfAttorney { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: FratattRettsligHandleevne
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deprivedLegalAuthority")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<DeprivedLegalAuthority> DeprivedLegalAuthority { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: RettsligHandleevne
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("legalAuthority")]
        public System.Collections.Generic.ICollection<LegalAuthority> LegalAuthority { get; init; }

        /// <summary>
        /// Contact Register Information for a person
        /// <br/>Data is from the Contact and Reservation Register (KRR)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("commonContactRegisterInformation")]
        public CommonContactRegisterInformation CommonContactRegisterInformation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sequenceNumber")]
        public long? SequenceNumber { get; init; }

    }

    /// <summary>
    /// Person used as contact
    /// <br/>Used in Residuary estate, the person taking care of the residuary estate
    /// <br/>
    /// <br/>FREG: PersonSomKontakt
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PersonAsContact
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PersonAsContact(System.DateTimeOffset? @birthDate, string @norwegianIdentificationNumber, Name @personName)

        {

            this.BirthDate = @birthDate;

            this.PersonName = @personName;

            this.NorwegianIdentificationNumber = @norwegianIdentificationNumber;

        }    /// <summary>
        /// BirthDate of the contact person
        /// <br/>
        /// <br/>FREG: Foedselsdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]
        public System.DateTimeOffset? BirthDate { get; init; }

        /// <summary>
        /// Name of the contact person
        /// <br/>
        /// <br/>FREG: PersonName
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("personName")]
        public Name PersonName { get; init; }

        /// <summary>
        /// Nin of the contact person
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>Norwegian Identification Number (fødselsnummer / F-number or D-number)
        /// <br/>Freg: FoedselsEllerDNummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("norwegianIdentificationNumber")]
        public string NorwegianIdentificationNumber { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Personkjoenn
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PersonGender
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PersonGender(Gender? @gender, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.Gender = @gender;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kjoenn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Gender? Gender { get; init; }

    }

    /// <summary>
    /// Identification for a person, used for foreign persons identification and immigration authorities identification
    /// <br/>
    /// <br/>FREG: Personidentifikasjon
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PersonIdentification
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PersonIdentification(string @identificationNumber, string @identificationNumberType, string @issuerCountry, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.IdentificationNumber = @identificationNumber;

            this.IdentificationNumberType = @identificationNumberType;

            this.IssuerCountry = @issuerCountry;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// The identification number
        /// <br/>
        /// <br/>FREG: Identifikasjonsnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identificationNumber")]
        public string IdentificationNumber { get; init; }

        /// <summary>
        /// Type of foreign identification
        /// <br/>Possible values:
        /// <br/>- utenlandskIdentifikasjonsnummer = Foreign identification number
        /// <br/>- taxIdentificationNumber = Tax Identification Number(TIN)
        /// <br/>- socialSecurityNumber = Social Security Number(SSN)
        /// <br/>- utlendingsmyndighetenesIdentifikasjonsnummer = "DUF-nummer" from the Norwegian UDI, for now
        /// <br/>
        /// <br/>FREG: Identifikasjonsnummertype
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identificationNumberType")]
        public string IdentificationNumberType { get; init; }

        /// <summary>
        /// Country codes given in ISO 3166-1 Alpha 3
        /// <br/>Always NOR for Person.ImmigrationAuthoritiesIdentificationNumber
        /// <br/>XXK = Kosovo
        /// <br/>
        /// <br/>FREG: Utstederland
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuerCountry")]
        public string IssuerCountry { get; init; }

    }

    /// <summary>
    /// Information on a persons name.
    /// <br/>
    /// <br/>FREG: Folkeregisterpersonnavn
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PersonName
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PersonName(string @familyName, string @givenName, bool? @isValid, string @middleName, Name @originalName, string @reason, System.DateTimeOffset? @registeredAt, string @shortName, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.GivenName = @givenName;

            this.MiddleName = @middleName;

            this.FamilyName = @familyName;

            this.ShortName = @shortName;

            this.OriginalName = @originalName;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Fornavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("givenName")]
        public string GivenName { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Mellomnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("middleName")]
        public string MiddleName { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Etternavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("familyName")]
        public string FamilyName { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ForkortetNavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shortName")]
        public string ShortName { get; init; }

        /// <summary>
        /// Provided in the same language/character set as in the original identification document (ISO-10646)
        /// <br/>
        /// <br/>FREG: OriginaltNavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("originalName")]
        public Name OriginalName { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: PersonNavnFoedselsdato
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PersonNameBirthDate
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PersonNameBirthDate(System.DateTimeOffset? @birthDate, string @citizenship, Gender? @gender, Name @name)

        {

            this.Name = @name;

            this.BirthDate = @birthDate;

            this.Citizenship = @citizenship;

            this.Gender = @gender;

        }    /// <summary>
        /// Name of the contact person
        /// <br/>
        /// <br/>FREG: PersonName
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Name Name { get; init; }

        /// <summary>
        /// Birthdate of the contact person
        /// <br/>
        /// <br/>FREG: Foedselsdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]
        public System.DateTimeOffset? BirthDate { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Statsborgerskap
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("citizenship")]
        public string Citizenship { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kjoenn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Gender? Gender { get; init; }

    }

    /// <summary>
    /// Search result object with a list of results.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PersonSearchResult
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PersonSearchResult(int? @endIndex, System.Collections.Generic.ICollection<Person> @results, int? @startIndex)

        {

            this.Results = @results;

            this.StartIndex = @startIndex;

            this.EndIndex = @endIndex;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.ICollection<Person> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startIndex")]
        [System.Obsolete]
        public int? StartIndex { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("endIndex")]
        [System.Obsolete]
        public int? EndIndex { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Folkeregisterpersonstatus
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PersonStatus
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PersonStatus(bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, PersonStatusType? @status, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.Status = @status;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Status
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PersonStatusType? Status { get; init; }

    }

    /// <summary>
    /// The nature of the relationship/connection
    /// <br/>to Norway and the National Population Registry&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Resident&lt;/i&gt; - FREG: Bosatt&lt;/li&gt;&lt;li&gt;&lt;i&gt;Emigrated&lt;/i&gt; - FREG: Utflyttet&lt;/li&gt;&lt;li&gt;&lt;i&gt;Disappeared&lt;/i&gt; - FREG: Forsvunnet&lt;/li&gt;&lt;li&gt;&lt;i&gt;Deceased&lt;/i&gt; - FREG: Doed&lt;/li&gt;&lt;li&gt;&lt;i&gt;Discontinued&lt;/i&gt; - FREG: Opphoert&lt;/li&gt;&lt;li&gt;&lt;i&gt;RegisteredAtBirth&lt;/i&gt; - FREG: Foedselsregistrert&lt;/li&gt;&lt;li&gt;&lt;i&gt;Temporary&lt;/i&gt; - FREG: Midlertidig&lt;/li&gt;&lt;li&gt;&lt;i&gt;Inactive&lt;/i&gt; - FREG: Inaktiv&lt;/li&gt;&lt;li&gt;&lt;i&gt;NotResident&lt;/i&gt; - FREG: IkkeBosatt&lt;/li&gt;&lt;li&gt;&lt;i&gt;Active&lt;/i&gt; - FREG: Aktiv&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PersonStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Resident")]
        Resident = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Emigrated")]
        Emigrated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Disappeared")]
        Disappeared = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Deceased")]
        Deceased = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Discontinued")]
        Discontinued = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RegisteredAtBirth")]
        RegisteredAtBirth = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Temporary")]
        Temporary = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NotResident")]
        NotResident = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 9,

    }

    /// <summary>
    /// Address to a post box
    /// <br/>
    /// <br/>FREG: Postboksadresse
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostBoxAddress
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PostBoxAddress(City @city, string @postBoxIdentification, string @postBoxOwner)

        {

            this.PostBoxOwner = @postBoxOwner;

            this.PostBoxIdentification = @postBoxIdentification;

            this.City = @city;

        }    /// <summary>
        /// Person owning or renting the post box
        /// <br/>
        /// <br/>FREG: Postbokseier
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postBoxOwner")]
        public string PostBoxOwner { get; init; }

        /// <summary>
        /// Post box identifier consisting of its alphanumeric identification
        /// <br/>together with the postbox office name.
        /// <br/>
        /// <br/>FREG: Postboks
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postBoxIdentification")]
        public string PostBoxIdentification { get; init; }

        /// <summary>
        /// Post location / city and zip code
        /// <br/>
        /// <br/>FREG: Poststed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public City City { get; init; }

    }

    /// <summary>
    /// Will be removed with deprecation of API v1.0
    /// <br/>
    /// <br/>FREG: PreferertKontaktadresse
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PreferredContactAddress
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PreferredContactAddress(AddressConfidentiality? @addressConfidentiality, AddressType? @addressType, FreeformAddress @freeformContactAddress, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.AddressType = @addressType;

            this.AddressConfidentiality = @addressConfidentiality;

            this.FreeformContactAddress = @freeformContactAddress;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Valg
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AddressType? AddressType { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Adressegradering
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressConfidentiality")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AddressConfidentiality? AddressConfidentiality { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: KontaktadresseIFrittFormat
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("freeformContactAddress")]
        public FreeformAddress FreeformContactAddress { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>Freg: Oppholdsadresse
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PresentAddress
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PresentAddress(AddressConfidentiality? @addressConfidentiality, long? @basicStatisticalUnit, string @basicStatisticalUnitName, CadastralAddress @cadastralAddress, string @cadastralIdentifier, InternationalAddress @foreignAddress, string @fullBasicStatisticalUnitNumber, string @geographicalUrbanDistrictCode, string @geographicalUrbanDistrictName, bool? @isAddressUnknown, bool? @isValid, System.DateTimeOffset? @presentAddressDate, string @reason, System.DateTimeOffset? @registeredAt, string @source, StayElsewhere? @stayElsewhere, StreetAddress @streetAddress, string @urbanDistrictCode, string @urbanDistrictName, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.ForeignAddress = @foreignAddress;

            this.IsAddressUnknown = @isAddressUnknown;

            this.StreetAddress = @streetAddress;

            this.CadastralAddress = @cadastralAddress;

            this.CadastralIdentifier = @cadastralIdentifier;

            this.AddressConfidentiality = @addressConfidentiality;

            this.PresentAddressDate = @presentAddressDate;

            this.StayElsewhere = @stayElsewhere;

            this.UrbanDistrictCode = @urbanDistrictCode;

            this.UrbanDistrictName = @urbanDistrictName;

            this.GeographicalUrbanDistrictCode = @geographicalUrbanDistrictCode;

            this.GeographicalUrbanDistrictName = @geographicalUrbanDistrictName;

            this.BasicStatisticalUnit = @basicStatisticalUnit;

            this.FullBasicStatisticalUnitNumber = @fullBasicStatisticalUnitNumber;

            this.BasicStatisticalUnitName = @basicStatisticalUnitName;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: UtenlandskAdresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreignAddress")]
        public InternationalAddress ForeignAddress { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: AdressenErUkjent
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isAddressUnknown")]
        public bool? IsAddressUnknown { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Vegadresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("streetAddress")]
        public StreetAddress StreetAddress { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Matrikkeladresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cadastralAddress")]
        public CadastralAddress CadastralAddress { get; init; }

        /// <summary>
        /// Unique identifier from the Norwegian Mapping Authority.
        /// <br/>
        /// <br/>FREG: AdresseIdentifikatorFraMatrikkelen
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cadastralIdentifier")]
        public string CadastralIdentifier { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Adressegradering
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressConfidentiality")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AddressConfidentiality? AddressConfidentiality { get; init; }

        /// <summary>
        /// The date of when this living address was reported to the National Population Register (FREG).
        /// <br/>
        /// <br/>FREG: Oppholdsadressedato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("presentAddressDate")]
        public System.DateTimeOffset? PresentAddressDate { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: OppholdAnnetSted
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stayElsewhere")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StayElsewhere? StayElsewhere { get; init; }

        /// <summary>
        /// Six digit code for the urban district that provide municipal health- and social services for the address.
        /// <br/>Service providing districts are defined by the city, but only Oslo Kommune
        /// <br/>has a classification that differs from the geographical classification defined by SSB.
        /// <br/>Urban districts are only used in Oslo, Bergen, Stavanger and Trondheim.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("urbanDistrictCode")]
        public string UrbanDistrictCode { get; init; }

        /// <summary>
        /// The name of the service providing urban district.
        /// <br/>
        /// <br/>SSB: Bydelsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("urbanDistrictName")]
        public string UrbanDistrictName { get; init; }

        /// <summary>
        /// Six digit code for the geographical urban district the address belongs to.
        /// <br/>Urban districts are only used in Oslo, Bergen, Stavanger and Trondheim.
        /// <br/>Geographical urban districts are defined by SSB in classification 103.
        /// <br/>&lt;see href="https://www.ssb.no/klass/klassifikasjoner/103" /&gt;
        /// <br/>SSB: Bydelskode
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("geographicalUrbanDistrictCode")]
        public string GeographicalUrbanDistrictCode { get; init; }

        /// <summary>
        /// The name of the geographical urban district
        /// <br/>
        /// <br/>SSB: Bydelsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("geographicalUrbanDistrictName")]
        public string GeographicalUrbanDistrictName { get; init; }

        /// <summary>
        /// Three to four digit code used to divide a municipality in small, stable geographical units,
        /// <br/>used as basis for regional statistical analysis.
        /// <br/>Should be interpreted as a four digit string with leading zero.
        /// <br/>Value 401 means "0401" and so on. For present addresses, the basic statistical unit
        /// <br/>is enriched by the Person API, derived from the street or cadastral address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("basicStatisticalUnit")]
        [System.Obsolete]
        public long? BasicStatisticalUnit { get; init; }

        /// <summary>
        /// Eight digit code used to divide a municipality in small, stable geographical units,
        /// <br/>used as basis for regional statistical analysis.
        /// <br/>The first four digits are the municipality number,
        /// <br/>followed by four digits with leading zero identifying the area.
        /// <br/>For present addresses, the basic statistical unit
        /// <br/>is enriched by the Person API, attempted to be derived from the street or cadastral address
        /// <br/>using data from Kartverket (Matrikkelen).
        /// <br/>Basic statistical units are defined by SSB in classification 1.
        /// <br/>&lt;see href="https://www.ssb.no/klass/klassifikasjoner/1" /&gt;
        /// <br/>SSB: Grunnkretsnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fullBasicStatisticalUnitNumber")]
        public string FullBasicStatisticalUnitNumber { get; init; }

        /// <summary>
        /// The name of the basic statistical unit.
        /// <br/>
        /// <br/>SSB: BasicStatisticalUnitName
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("basicStatisticalUnitName")]
        public string BasicStatisticalUnitName { get; init; }

    }

    /// <summary>
    /// Type of Probate Certificate
    /// <br/>
    /// <br/>FREG: KontaktinformasjonForDoedsbo.Skifteform&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Public&lt;/i&gt; - FREG: Offentlig&lt;/li&gt;&lt;li&gt;&lt;i&gt;Other&lt;/i&gt; - FREG: Annet&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProbateCertificateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Public")]
        Public = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ProblemDetails
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ProblemDetails(string @detail, string @instance, int? @status, string @title, string @type)

        {

            this.Type = @type;

            this.Title = @title;

            this.Status = @status;

            this.Detail = @detail;

            this.Instance = @instance;

        }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int? Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string Detail { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        public string Instance { get; init; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 
    /// <br/>FREG: RelatertBiPerson
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RelatedBiPerson
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public RelatedBiPerson(System.DateTimeOffset? @birthDate, string @citizenship, Gender? @gender, Name @name)

        {

            this.Name = @name;

            this.BirthDate = @birthDate;

            this.Citizenship = @citizenship;

            this.Gender = @gender;

        }    /// <summary>
        /// 
        /// <br/>FREG: Navn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Name Name { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Foedselsdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]
        public System.DateTimeOffset? BirthDate { get; init; }

        /// <summary>
        /// Name of country RelatedBiPerson has a Citizenship
        /// <br/>FREG: Statsborgerskap
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("citizenship")]
        public string Citizenship { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kjoenn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Gender? Gender { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>KRR: reservasjon&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Yes&lt;/i&gt; - KRR: JA&lt;/li&gt;&lt;li&gt;&lt;i&gt;No&lt;/i&gt; - KRR: NEI&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Reservation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 1,

    }

    /// <summary>
    /// Information on a persons residence permit in Norway.
    /// <br/>
    /// <br/>FREG: Opphold
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ResidencePermit
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ResidencePermit(bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, ResidencePermitType? @residencePermitType, string @source, System.DateTimeOffset? @stayFrom, System.DateTimeOffset? @stayTo, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.ResidencePermitType = @residencePermitType;

            this.StayFrom = @stayFrom;

            this.StayTo = @stayTo;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Oppholdstillatelse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("residencePermitType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ResidencePermitType? ResidencePermitType { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: OppholdFra
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stayFrom")]
        public System.DateTimeOffset? StayFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: OppholdTil
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stayTo")]
        public System.DateTimeOffset? StayTo { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: Oppholdstillatelse&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Temporary&lt;/i&gt; - FREG: Midlertidig&lt;/li&gt;&lt;li&gt;&lt;i&gt;Permanent&lt;/i&gt; - FREG: Permanent&lt;/li&gt;&lt;li&gt;&lt;i&gt;InformationMissing&lt;/i&gt; - FREG: OpplysningMangler&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResidencePermitType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Temporary")]
        Temporary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Permanent")]
        Permanent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"InformationMissing")]
        InformationMissing = 2,

    }

    /// <summary>
    /// Address where person is registered to live.
    /// <br/>Only one of StreetAddress, CadastralAddress
    /// <br/>or UnknownResidence is in use
    /// <br/>
    /// <br/>FREG: Bostedsadresse
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ResidentialAddress
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ResidentialAddress(AddressConfidentiality? @addressConfidentiality, long? @basicStatisticalUnit, string @basicStatisticalUnitName, CadastralAddress @cadastralAddress, string @cadastralIdentifier, long? @churchDistrict, string @closeCadastralIdentifier, long? @constituency, string @fullBasicStatisticalUnitNumber, string @geographicalUrbanDistrictCode, string @geographicalUrbanDistrictName, bool? @isValid, System.DateTimeOffset? @moveDate, string @reason, System.DateTimeOffset? @registeredAt, long? @schoolDistrict, string @source, StreetAddress @streetAddress, UnknownResidence @unknownResidence, string @urbanDistrictCode, string @urbanDistrictName, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.StreetAddress = @streetAddress;

            this.CadastralAddress = @cadastralAddress;

            this.UnknownResidence = @unknownResidence;

            this.CadastralIdentifier = @cadastralIdentifier;

            this.CloseCadastralIdentifier = @closeCadastralIdentifier;

            this.AddressConfidentiality = @addressConfidentiality;

            this.MoveDate = @moveDate;

            this.BasicStatisticalUnit = @basicStatisticalUnit;

            this.FullBasicStatisticalUnitNumber = @fullBasicStatisticalUnitNumber;

            this.BasicStatisticalUnitName = @basicStatisticalUnitName;

            this.Constituency = @constituency;

            this.SchoolDistrict = @schoolDistrict;

            this.ChurchDistrict = @churchDistrict;

            this.UrbanDistrictCode = @urbanDistrictCode;

            this.UrbanDistrictName = @urbanDistrictName;

            this.GeographicalUrbanDistrictCode = @geographicalUrbanDistrictCode;

            this.GeographicalUrbanDistrictName = @geographicalUrbanDistrictName;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// The street address
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>May be missing, only one of the address elements are used. See ResidentialAddress
        /// <br/>Freg: Vegadresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("streetAddress")]
        public StreetAddress StreetAddress { get; init; }

        /// <summary>
        /// The cadastral address
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>May be missing, only one of the address elements are used. See ResidentialAddress
        /// <br/>Freg: Matrikkeladresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cadastralAddress")]
        public CadastralAddress CadastralAddress { get; init; }

        /// <summary>
        /// Used if the persons residence is unknown
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>May be missing, only one of the address elements are used. See ResidentialAddress
        /// <br/>Freg: UkjentBosted
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unknownResidence")]
        public UnknownResidence UnknownResidence { get; init; }

        /// <summary>
        /// Unique identifier from the Norwegian Mapping Authority.
        /// <br/>
        /// <br/>FREG: AdresseIdentifikatorFraMatrikkelen
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cadastralIdentifier")]
        public string CadastralIdentifier { get; init; }

        /// <summary>
        /// Unique identifier from the Mapping Authority.
        /// <br/>If the Cadastral information used in CadastralIdentifier
        /// <br/>is inaccurate, CloseCadastralIdentifier will contain the
        /// <br/>unqiue identifier for a near by house.
        /// <br/>I.e. If the house letter is not known, the CloseCadastralIdentifier
        /// <br/>could point to the house with letter "A", while CadastralIdentifier
        /// <br/>would point to all the house number, without letters (which could be multiple houses)
        /// <br/>Used to catch changes to the Cadastral to a nearby
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>(07.02.2020) Not in use
        /// <br/>Freg: NaerAdresseIdentifikatorFraMatrikkelen
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("closeCadastralIdentifier")]
        public string CloseCadastralIdentifier { get; init; }

        /// <summary>
        /// Describes with which confidentiality the address
        /// <br/>should be handled
        /// <br/>
        /// <br/>FREG: Adressegradering
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressConfidentiality")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AddressConfidentiality? AddressConfidentiality { get; init; }

        /// <summary>
        /// Reported as move date by person
        /// <br/>
        /// <br/>FREG: Flyttedato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("moveDate")]
        public System.DateTimeOffset? MoveDate { get; init; }

        /// <summary>
        /// Three to four digit code used to divide a municipality in small, stable geographical units,
        /// <br/>used as basis for regional statistical analysis.
        /// <br/>Should be interpreted as a four digit string with leading zero.
        /// <br/>Value 401 means "0401" and so on. For residential addresses, the basic statistical unit
        /// <br/>is provided by FREG.
        /// <br/>
        /// <br/>FREG: Grunnkrets
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("basicStatisticalUnit")]
        public long? BasicStatisticalUnit { get; init; }

        /// <summary>
        /// Eight digit code used to divide a municipality in small, stable geographical units,
        /// <br/>used as basis for regional statistical analysis.
        /// <br/>The first four digits are the municipality number,
        /// <br/>followed by four digits with leading zero identifying the area.
        /// <br/>Basic statistical units are defined by SSB in classification 1.
        /// <br/>&lt;see href="https://www.ssb.no/klass/klassifikasjoner/1" /&gt;
        /// <br/>SSB: Grunnkretsnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fullBasicStatisticalUnitNumber")]
        public string FullBasicStatisticalUnitNumber { get; init; }

        /// <summary>
        /// The name of the basic statistical unit.
        /// <br/>
        /// <br/>SSB: BasicStatisticalUnitName
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("basicStatisticalUnitName")]
        public string BasicStatisticalUnitName { get; init; }

        /// <summary>
        /// Unique code by the municipality used as
        /// <br/>geographical division of the municipality set by the
        /// <br/>electoral committee
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>Also knows as in the voting constituency Cadastral
        /// <br/>Freg: Stemmekrets (Valgkrets i matrikkelen)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("constituency")]
        public long? Constituency { get; init; }

        /// <summary>
        /// Unique code by the municipality used to describe
        /// <br/>a geographical division, used as a non-binding school
        /// <br/>affiliation for kids in the area
        /// <br/>
        /// <br/>FREG: Skolekrets
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("schoolDistrict")]
        public long? SchoolDistrict { get; init; }

        /// <summary>
        /// Unique code for the parish (kirke sogn)
        /// <br/>Parish is the basic unit of the Norwegian Church.
        /// <br/>A church district can extend over several municipalities
        /// <br/>
        /// <br/>FREG: Kirkekrets
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("churchDistrict")]
        public long? ChurchDistrict { get; init; }

        /// <summary>
        /// Six digit code for the urban district that provide municipal health- and social services for the address.
        /// <br/>Service providing districts are defined by the city, but only Oslo Kommune
        /// <br/>has a classification that differs from the geographical classification defined by SSB.
        /// <br/>Urban districts are only used in Oslo, Bergen, Stavanger and Trondheim.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("urbanDistrictCode")]
        public string UrbanDistrictCode { get; init; }

        /// <summary>
        /// The name of the service providing urban district.
        /// <br/>
        /// <br/>SSB: Bydelsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("urbanDistrictName")]
        public string UrbanDistrictName { get; init; }

        /// <summary>
        /// Six digit code for the geographical urban district the address belongs to.
        /// <br/>Urban districts are only used in Oslo, Bergen, Stavanger and Trondheim.
        /// <br/>Geographical urban districts are defined by SSB in classification 103.
        /// <br/>&lt;see href="https://www.ssb.no/klass/klassifikasjoner/103" /&gt;
        /// <br/>SSB: Bydelskode
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("geographicalUrbanDistrictCode")]
        public string GeographicalUrbanDistrictCode { get; init; }

        /// <summary>
        /// The name of the geographical urban district
        /// <br/>
        /// <br/>SSB: Bydelsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("geographicalUrbanDistrictName")]
        public string GeographicalUrbanDistrictName { get; init; }

    }

    /// <summary>
    /// Residuary estate contact information
    /// <br/>Will be either a Person, a Lawyer or an Organization.
    /// <br/>
    /// <br/>FREG: KontaktinformasjonForDoedsbo
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ResiduaryEstateContactInformation
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ResiduaryEstateContactInformation(ContactAddressForResiduaryEstate @contactAddress, bool? @isValid, LawyerAsContact @lawyer, OrganizationAsContact @organization, PersonAsContact @person, System.DateTimeOffset? @probateCertificateIssueDate, ProbateCertificateType? @probateCertificateType, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.Person = @person;

            this.Lawyer = @lawyer;

            this.Organization = @organization;

            this.ProbateCertificateType = @probateCertificateType;

            this.ProbateCertificateIssueDate = @probateCertificateIssueDate;

            this.ContactAddress = @contactAddress;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        ///  Used if an private person takes care of the estate
        /// <br/>
        /// <br/>FREG: Person
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("person")]
        public PersonAsContact Person { get; init; }

        /// <summary>
        /// Used if a lawyer takes care of the estate
        /// <br/>
        /// <br/>FREG: Advokat
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lawyer")]
        public LawyerAsContact Lawyer { get; init; }

        /// <summary>
        /// Used if an organization takes care of the estate
        /// <br/>
        /// <br/>FREG: Organisasjon
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("organization")]
        public OrganizationAsContact Organization { get; init; }

        /// <summary>
        /// Probate certificate type
        /// <br/>
        /// <br/>FREG: Skifteform
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("probateCertificateType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ProbateCertificateType? ProbateCertificateType { get; init; }

        /// <summary>
        /// Date of the probate certificate issuance
        /// <br/>
        /// <br/>FREG: Attestutstedelsesdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("probateCertificateIssueDate")]
        public System.DateTimeOffset? ProbateCertificateIssueDate { get; init; }

        /// <summary>
        /// Contant address for the residuary estate
        /// <br/>
        /// <br/>FREG: Adress
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactAddress")]
        public ContactAddressForResiduaryEstate ContactAddress { get; init; }

    }

    /// <summary>
    /// Information on which sami languages a person uses.
    /// <br/>
    /// <br/>FREG: SamiskSpraak
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SamiLanguage
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SamiLanguage(bool? @isValid, System.Collections.Generic.ICollection<SamiLanguageType> @language, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.Language = @language;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Spraak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("language")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<SamiLanguageType> Language { get; init; }

    }

    /// <summary>
    /// Sami language types.
    /// <br/>
    /// <br/>FREG: SamiskSpraakType&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Nordsamisk&lt;/i&gt; - FREG: Nordsamisk&lt;/li&gt;&lt;li&gt;&lt;i&gt;Soersamisk&lt;/i&gt; - FREG: Soersamisk&lt;/li&gt;&lt;li&gt;&lt;i&gt;Lulesamisk&lt;/i&gt; - FREG: Lulesamisk&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SamiLanguageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Nordsamisk")]
        Nordsamisk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Soersamisk")]
        Soersamisk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Lulesamisk")]
        Lulesamisk = 2,

    }

    /// <summary>
    /// 
    /// <br/>FREG: SametingetsValgmanntall
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SamiParliamentElectoralRegistry
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SamiParliamentElectoralRegistry(bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, System.DateTimeOffset? @resolutionDate, string @source, SamiParliamentElectoralRegistryStatus? @status, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.Status = @status;

            this.ResolutionDate = @resolutionDate;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Status
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SamiParliamentElectoralRegistryStatus? Status { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Vedtaksdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resolutionDate")]
        public System.DateTimeOffset? ResolutionDate { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>FREG: ForholdTilSametingetsValgmanntall&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Enrolled&lt;/i&gt; - Enrolled in the sami parlament electorial registry
    /// <br/>            FREG: Innmeldt&lt;/li&gt;&lt;li&gt;&lt;i&gt;Unenrolled&lt;/i&gt; - Previously enrolled, but now unenrolled from the sami parlament electorial registry
    /// <br/>            FREG: Utmeldt&lt;/li&gt;&lt;li&gt;&lt;i&gt;NeverEnrolled&lt;/i&gt; - Never enrolled in the sami electorial registry
    /// <br/>            FREG: AldriInnmeldt&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SamiParliamentElectoralRegistryStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Enrolled")]
        Enrolled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Unenrolled")]
        Unenrolled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NeverEnrolled")]
        NeverEnrolled = 2,

    }

    /// <summary>
    /// Search result with count of matches.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SearchMatchCountResult
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SearchMatchCountResult(int? @matchCount)

        {

            this.MatchCount = @matchCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("matchCount")]
        public int? MatchCount { get; init; }

    }

    /// <summary>
    /// Categorization of occupancy unit type
    /// <br/>
    /// <br/>FREG: Bruksenhetstype&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Housing&lt;/i&gt; - Approved as housing
    /// <br/>             FREG: Bolig&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherThanHousing&lt;/i&gt; - Mostly commercial usage
    /// <br/>            FREG: AnnetEnnBolig&lt;/li&gt;&lt;li&gt;&lt;i&gt;HolidayHome&lt;/i&gt; - Approved as holiday home, but not housing
    /// <br/>            FREG: Fritidsbolig&lt;/li&gt;&lt;li&gt;&lt;i&gt;NotApprovedAsHousing&lt;/i&gt; - Unit most likely not approved as housing
    /// <br/>            FREG: IkkeGodkjentBolig&lt;/li&gt;&lt;li&gt;&lt;i&gt;UnnumberedSeparatelyOccupiedUnit&lt;/i&gt; - Used to connect building-, cadastral- and address
    /// <br/>            FREG: UnummerertBruksenhet&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SeparatelyOccupiedUnitType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Housing")]
        Housing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OtherThanHousing")]
        OtherThanHousing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HolidayHome")]
        HolidayHome = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NotApprovedAsHousing")]
        NotApprovedAsHousing = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UnnumberedSeparatelyOccupiedUnit")]
        UnnumberedSeparatelyOccupiedUnit = 4,

    }

    /// <summary>
    /// Address information on shared parenting, shared residence or joint residence
    /// <br/>
    /// <br/>Remarks: 
    /// <br/>Only one of StreetAddress, CadastralAddress
    /// <br/>or UnknownResidence is in use.
    /// <br/>Contains address information based on the shared parental agreement.
    /// <br/>This address is a copy of the address for the parent not sharing their residential address
    /// <br/>with the child at that point.
    /// <br/>This address will be updated if that parent moves.
    /// <br/>            
    /// <br/>See also Person.ResidentialAddress
    /// <br/>            
    /// <br/>Freg: Folkeregisterperson.DeltBosted
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SharedResidence
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SharedResidence(AddressConfidentiality? @addressConfidentiality, long? @basicStatisticalUnit, string @basicStatisticalUnitName, CadastralAddress @cadastralAddress, string @cadastralIdentifier, string @closeCadastralIdentifier, System.DateTimeOffset? @contractValidFrom, System.DateTimeOffset? @contractValidTo, string @fullBasicStatisticalUnitNumber, string @geographicalUrbanDistrictCode, string @geographicalUrbanDistrictName, bool? @isValid, string @reason, System.DateTimeOffset? @registeredAt, string @source, StreetAddress @streetAddress, UnknownResidence @unknownResidence, string @urbanDistrictCode, string @urbanDistrictName, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.StreetAddress = @streetAddress;

            this.CadastralAddress = @cadastralAddress;

            this.UnknownResidence = @unknownResidence;

            this.ContractValidFrom = @contractValidFrom;

            this.ContractValidTo = @contractValidTo;

            this.CadastralIdentifier = @cadastralIdentifier;

            this.CloseCadastralIdentifier = @closeCadastralIdentifier;

            this.AddressConfidentiality = @addressConfidentiality;

            this.UrbanDistrictCode = @urbanDistrictCode;

            this.UrbanDistrictName = @urbanDistrictName;

            this.GeographicalUrbanDistrictCode = @geographicalUrbanDistrictCode;

            this.GeographicalUrbanDistrictName = @geographicalUrbanDistrictName;

            this.BasicStatisticalUnit = @basicStatisticalUnit;

            this.FullBasicStatisticalUnitNumber = @fullBasicStatisticalUnitNumber;

            this.BasicStatisticalUnitName = @basicStatisticalUnitName;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// The street address for the shared residence
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>May be missing, only one of the address elements are used. See ResidentialAddress
        /// <br/>Freg: Vegadresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("streetAddress")]
        public StreetAddress StreetAddress { get; init; }

        /// <summary>
        /// The cadastral address for the shared residence
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>May be missing, only one of the address elements are used. See ResidentialAddress
        /// <br/>Freg: Matrikkeladresse
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cadastralAddress")]
        public CadastralAddress CadastralAddress { get; init; }

        /// <summary>
        /// Used if the persons shared residence is unknown
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>May be missing, only one of the address elements are used. See ResidentialAddress
        /// <br/>Freg: UkjentBosted
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unknownResidence")]
        public UnknownResidence UnknownResidence { get; init; }

        /// <summary>
        /// Start date for the agreement between parents for
        /// <br/>the shared residence
        /// <br/>
        /// <br/>FREG: StartdatoForKontrak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contractValidFrom")]
        public System.DateTimeOffset? ContractValidFrom { get; init; }

        /// <summary>
        /// End date for the agreement between parents for
        /// <br/>the shared residence
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>May not have a end date
        /// <br/>Freg: SluttdatoForKontrak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contractValidTo")]
        public System.DateTimeOffset? ContractValidTo { get; init; }

        /// <summary>
        /// Unique identifier from the Mapping Authority.
        /// <br/>Used to catch changes to the Cadastral
        /// <br/>
        /// <br/>FREG: AdresseidentifikatorFraMatrikkelen
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cadastralIdentifier")]
        public string CadastralIdentifier { get; init; }

        /// <summary>
        /// ResidentialAddress.CloseCadastralIdentifier
        /// <br/>
        /// <br/>FREG: NaerAdresseIdentifikatorFraMatrikkelen
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("closeCadastralIdentifier")]
        public string CloseCadastralIdentifier { get; init; }

        /// <summary>
        /// Describes with which confidentiality the address
        /// <br/>should be handled
        /// <br/>
        /// <br/>FREG: Adressegradering
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressConfidentiality")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AddressConfidentiality? AddressConfidentiality { get; init; }

        /// <summary>
        /// Six digit code for the urban district that provide municipal health- and social services for the address.
        /// <br/>Service providing districts are defined by the city, but only Oslo Kommune
        /// <br/>has a classification that differs from the geographical classification defined by SSB.
        /// <br/>Urban districts are only used in Oslo, Bergen, Stavanger and Trondheim.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("urbanDistrictCode")]
        public string UrbanDistrictCode { get; init; }

        /// <summary>
        /// The name of the service providing urban district.
        /// <br/>
        /// <br/>SSB: Bydelsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("urbanDistrictName")]
        public string UrbanDistrictName { get; init; }

        /// <summary>
        /// Six digit code for the geographical urban district the address belongs to.
        /// <br/>Urban districts are only used in Oslo, Bergen, Stavanger and Trondheim.
        /// <br/>Geographical urban districts are defined by SSB in classification 103.
        /// <br/>&lt;see href="https://www.ssb.no/klass/klassifikasjoner/103" /&gt;
        /// <br/>SSB: Bydelskode
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("geographicalUrbanDistrictCode")]
        public string GeographicalUrbanDistrictCode { get; init; }

        /// <summary>
        /// The name of the geographical urban district
        /// <br/>
        /// <br/>SSB: Bydelsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("geographicalUrbanDistrictName")]
        public string GeographicalUrbanDistrictName { get; init; }

        /// <summary>
        /// Three to four digit code used to divide a municipality in small, stable geographical units,
        /// <br/>used as basis for regional statistical analysis.
        /// <br/>Should be interpreted as a four digit string with leading zero.
        /// <br/>Value 401 means "0401" and so on. For shared residences, the basic statistical unit
        /// <br/>is enriched by the Person API, derived from the street or cadastral address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("basicStatisticalUnit")]
        [System.Obsolete]
        public long? BasicStatisticalUnit { get; init; }

        /// <summary>
        /// Eight digit code used to divide a municipality in small, stable geographical units,
        /// <br/>used as basis for regional statistical analysis.
        /// <br/>The first four digits is the municipality number,
        /// <br/>followed by four digits identifying the area.
        /// <br/>For shared residences, the basic statistical unit
        /// <br/>is enriched by the Person API, attempted to be derived from the street or cadastral address
        /// <br/>using data from Kartverket (Matrikkelen).
        /// <br/>Basic statistical units are defined by SSB in classification 1.
        /// <br/>&lt;see href="https://www.ssb.no/klass/klassifikasjoner/1" /&gt;
        /// <br/>SSB: Grunnkretsnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fullBasicStatisticalUnitNumber")]
        public string FullBasicStatisticalUnitNumber { get; init; }

        /// <summary>
        /// The name of the basic statistical unit.
        /// <br/>
        /// <br/>SSB: BasicStatisticalUnitName
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("basicStatisticalUnitName")]
        public string BasicStatisticalUnitName { get; init; }

    }

    /// <summary>
    /// 
    /// <br/>KRR: status&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Active&lt;/i&gt; - KRR: AKTIV&lt;/li&gt;&lt;li&gt;&lt;i&gt;Deleted&lt;/i&gt; - KRR: SLETTET&lt;/li&gt;&lt;li&gt;&lt;i&gt;NotRegistered&lt;/i&gt; - KRR: IKKE_REGISTRERT&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NotRegistered")]
        NotRegistered = 2,

    }

    /// <summary>
    /// 
    /// <br/>FREG: OppholdAnnetSted&lt;p&gt;Possible values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Military&lt;/i&gt; - FREG: Militaer&lt;/li&gt;&lt;li&gt;&lt;i&gt;Abroad&lt;/i&gt; - FREG: Utenriks&lt;/li&gt;&lt;li&gt;&lt;i&gt;OnSvalbard&lt;/i&gt; - FREG: PaaSvalbard&lt;/li&gt;&lt;li&gt;&lt;i&gt;Commuter&lt;/i&gt; - FREG: Pendler&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StayElsewhere
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Military")]
        Military = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Abroad")]
        Abroad = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OnSvalbard")]
        OnSvalbard = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Commuter")]
        Commuter = 3,

    }

    /// <summary>
    /// Information regarding a persons residency on Svalbard
    /// <br/>
    /// <br/>FREG: OppholdPaaSvalbard
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StayOnSvalbard
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public StayOnSvalbard(System.DateTimeOffset? @endDate, LengthOfStay? @estimatedLengthOfStay, string @immigratedFromCountry, string @immigratedFromMunicipalityNumber, bool? @isValid, long? @numberOfPreviousStays, string @reason, System.DateTimeOffset? @registeredAt, string @source, System.DateTimeOffset? @startDate, System.DateTimeOffset? @validFrom, System.DateTimeOffset? @validTo)

        {

            this.RegisteredAt = @registeredAt;

            this.IsValid = @isValid;

            this.Source = @source;

            this.Reason = @reason;

            this.ValidFrom = @validFrom;

            this.ValidTo = @validTo;

            this.StartDate = @startDate;

            this.EndDate = @endDate;

            this.ImmigratedFromMunicipalityNumber = @immigratedFromMunicipalityNumber;

            this.ImmigratedFromCountry = @immigratedFromCountry;

            this.NumberOfPreviousStays = @numberOfPreviousStays;

            this.EstimatedLengthOfStay = @estimatedLengthOfStay;

        }    /// <summary>
        /// 
        /// <br/>FREG: Ajourholdstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset? RegisteredAt { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: ErGjeldende
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isValid")]
        public bool? IsValid { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Kilde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Aarsak
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Gyldighetstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Opphoerstidspunkt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Startdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTimeOffset? StartDate { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Sluttdato
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTimeOffset? EndDate { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Fraflyttingskommunenummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("immigratedFromMunicipalityNumber")]
        public string ImmigratedFromMunicipalityNumber { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: Fraflyttingsland
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("immigratedFromCountry")]
        public string ImmigratedFromCountry { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: AntallTidligereOpphold
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("numberOfPreviousStays")]
        public long? NumberOfPreviousStays { get; init; }

        /// <summary>
        /// 
        /// <br/>FREG: AntattOppholdsvarighet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedLengthOfStay")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public LengthOfStay? EstimatedLengthOfStay { get; init; }

    }

    /// <summary>
    /// Street address
    /// <br/>Describes the address where a person lives, stays or has shared parental residence
    /// <br/>
    /// <br/>FREG: Vegadresse
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StreetAddress
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public StreetAddress(string @addressAdditionalName, string @addressCode, string @addressName, StreetAddressNumber @addressNumber, City @city, string @coAddressName, string @countyName, string @countyNumber, string @municipalityName, string @municipalityNumber, string @separatelyOccupiedUnitNumber, SeparatelyOccupiedUnitType? @separatelyOccupiedUnitType)

        {

            this.MunicipalityNumber = @municipalityNumber;

            this.MunicipalityName = @municipalityName;

            this.CountyNumber = @countyNumber;

            this.CountyName = @countyName;

            this.SeparatelyOccupiedUnitNumber = @separatelyOccupiedUnitNumber;

            this.SeparatelyOccupiedUnitType = @separatelyOccupiedUnitType;

            this.AddressName = @addressName;

            this.AddressNumber = @addressNumber;

            this.AddressCode = @addressCode;

            this.AddressAdditionalName = @addressAdditionalName;

            this.City = @city;

            this.CoAddressName = @coAddressName;

        }    /// <summary>
        /// A four digit code identifying a municipality or municipality-like area.
        /// <br/>Municipalities are defined by SSB in classification 131.
        /// <br/>&lt;see href="https://www.ssb.no/klass/klassifikasjoner/131" /&gt;
        /// <br/>FREG: Kommunenummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("municipalityNumber")]
        public string MunicipalityNumber { get; init; }

        /// <summary>
        /// The name of the municipality. Some municipalities also include names in Sámi languages.
        /// <br/>
        /// <br/>SSB: Kommunenavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("municipalityName")]
        public string MunicipalityName { get; init; }

        /// <summary>
        /// A two digit code identifying a county.
        /// <br/>Counties are defined by SSB in classification 104.
        /// <br/>&lt;see href="https://www.ssb.no/klass/klassifikasjoner/104" /&gt;
        /// <br/>SSB: Fylkesnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countyNumber")]
        public string CountyNumber { get; init; }

        /// <summary>
        /// The name of the county. Some counties also include names in Sámi languages.
        /// <br/>
        /// <br/>SSB: Fylkesnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countyName")]
        public string CountyName { get; init; }

        /// <summary>
        /// A letter and four digits that uniquely identifies the
        /// <br/>sperately occupied unit inside a addressable building
        /// <br/>or part of a building
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>Two first digits represent floor number
        /// <br/>Freg: Bruksenhetsnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("separatelyOccupiedUnitNumber")]
        public string SeparatelyOccupiedUnitNumber { get; init; }

        /// <summary>
        /// Categorization of occupancy unit type
        /// <br/>
        /// <br/>FREG: Bruksenhetstype
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("separatelyOccupiedUnitType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SeparatelyOccupiedUnitType? SeparatelyOccupiedUnitType { get; init; }

        /// <summary>
        /// Name of a street, road, path, place or area
        /// <br/>as registered in the cadastral of a municipality.
        /// <br/>
        /// <br/>Remark: For persons with alternate identification number
        /// <br/>this may contain house number and letter.
        /// <br/>Freg: Adressenavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressName")]
        public string AddressName { get; init; }

        /// <summary>
        /// A number and maybe letters that uniquely identifiers property,
        /// <br/>facilities, buildings or entrances to building within
        /// <br/>an addressable street, road, path, place or area
        /// <br/>as registered in the cadastral of a municipality
        /// <br/>
        /// <br/>FREG: Adressenummmer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressNumber")]
        public StreetAddressNumber AddressNumber { get; init; }

        /// <summary>
        /// Number that uniquely identifies an addressable
        /// <br/>street, road, path, place or area
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>Known as StreetCode ("gatekode") in DSF
        /// <br/>Freg: Adressekode
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressCode")]
        public string AddressCode { get; init; }

        /// <summary>
        /// Inherited farm name (bruksnavn) or name of a institution or building,
        /// <br/>used as a part of the official address
        /// <br/>
        /// <br/>FREG: Addressetilleggsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressAdditionalName")]
        public string AddressAdditionalName { get; init; }

        /// <summary>
        /// Post location / city and zip code
        /// <br/>
        /// <br/>FREG: Poststed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public City City { get; init; }

        /// <summary>
        /// Description of who the recipient is in care of (C/O),
        /// <br/>or which recipient in an organization (v/ = with, or Att: = "Attention")
        /// <br/>
        /// <br/>FREG: CoAdressenavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("coAddressName")]
        public string CoAddressName { get; init; }

    }

    /// <summary>
    /// Street address for post usage
    /// <br/>Describes the address where a person lives, stays or has shared parental residence
    /// <br/>
    /// <br/>FREG: VegadresseForPost
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StreetAddressForPost
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public StreetAddressForPost(string @addressAdditionalName, string @addressCode, string @addressName, City @city, string @coAddressName, string @separatelyOccupiedUnitNumber, StreetAddressNumber @streetAddressNumber)

        {

            this.CoAddressName = @coAddressName;

            this.AddressName = @addressName;

            this.StreetAddressNumber = @streetAddressNumber;

            this.City = @city;

            this.AddressCode = @addressCode;

            this.AddressAdditionalName = @addressAdditionalName;

            this.SeparatelyOccupiedUnitNumber = @separatelyOccupiedUnitNumber;

        }    /// <summary>
        /// Description of who the recipient is in care of (C/O),
        /// <br/>or which recipient in an organization (v/ = with, or Att: = "Attention")
        /// <br/>
        /// <br/>FREG: CoAdressenavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("coAddressName")]
        public string CoAddressName { get; init; }

        /// <summary>
        /// Name of a street, road, path, place or area
        /// <br/>as registered in the cadastral of a municipality
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>Does not contain street address number (housing number and lettering)
        /// <br/>Freg: Adressenavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressName")]
        public string AddressName { get; init; }

        /// <summary>
        /// A number and maybe letters that uniquely identifiers property,
        /// <br/>facilities, buildings or entrances to building within
        /// <br/>an addressable street, road, path, place or area
        /// <br/>as registered in the cadastral of a municipality
        /// <br/>
        /// <br/>FREG: Adressenummmer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("streetAddressNumber")]
        public StreetAddressNumber StreetAddressNumber { get; init; }

        /// <summary>
        /// Post location / city and zip code
        /// <br/>
        /// <br/>FREG: Poststed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public City City { get; init; }

        /// <summary>
        /// Number that uniquely identifies an addressable
        /// <br/>street, road, path, place or area
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>Known as StreetCode ("gatekode") in DSF
        /// <br/>Freg: Adressekode
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressCode")]
        public string AddressCode { get; init; }

        /// <summary>
        /// Inherited farm name (bruksnavn) or name of a institution or building,
        /// <br/>used as a part of the official address
        /// <br/>
        /// <br/>FREG: Addressetilleggsnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressAdditionalName")]
        public string AddressAdditionalName { get; init; }

        /// <summary>
        /// A letter and four digits that uniquely identifies the
        /// <br/>separately occupied unit inside a addressable building
        /// <br/>or part of a building
        /// <br/>
        /// <br/>Remarks: 
        /// <br/>Two first digits represent floor number
        /// <br/>Freg: Bruksenhetsnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("separatelyOccupiedUnitNumber")]
        public string SeparatelyOccupiedUnitNumber { get; init; }

    }

    /// <summary>
    /// Street address number
    /// <br/>A number and maybe letters that uniquely identifiers property,
    /// <br/>facilities, buildings or entrances to building within
    /// <br/>an addressable street, road, path, place or area
    /// <br/>In Norway most residence has a house number and letter, but other systems exists
    /// <br/>
    /// <br/>FREG: Freg: Adressenummer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StreetAddressNumber
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public StreetAddressNumber(string @houseLetter, string @houseNumber)

        {

            this.HouseNumber = @houseNumber;

            this.HouseLetter = @houseLetter;

        }    /// <summary>
        /// A number that uniquely identifiers property,
        /// <br/>facilities, buildings or entrances to building within
        /// <br/>an addressable street, road, path, place or area
        /// <br/>
        /// <br/>FREG: Husnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("houseNumber")]
        public string HouseNumber { get; init; }

        /// <summary>
        /// A letter that together with HouseNumber
        /// <br/>uniquely identifiers property, facilities, buildings
        /// <br/>or entrances to building within an addressable
        /// <br/>street, road, path, place or area
        /// <br/>
        /// <br/>FREG: Husbokstav
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("houseLetter")]
        public string HouseLetter { get; init; }

    }

    /// <summary>
    /// Search result object with a list of results.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StringSearchResult
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public StringSearchResult(int? @endIndex, System.Collections.Generic.ICollection<string> @results, int? @startIndex)

        {

            this.Results = @results;

            this.StartIndex = @startIndex;

            this.EndIndex = @endIndex;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.ICollection<string> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startIndex")]
        [System.Obsolete]
        public int? StartIndex { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("endIndex")]
        [System.Obsolete]
        public int? EndIndex { get; init; }

    }

    /// <summary>
    /// Person has an unknown address
    /// <br/>
    /// <br/>FREG: UkjentBosted
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UnknownResidence
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UnknownResidence(string @countyName, string @countyNumber, string @municipalityName, string @municipalityNumber)

        {

            this.MunicipalityNumber = @municipalityNumber;

            this.MunicipalityName = @municipalityName;

            this.CountyNumber = @countyNumber;

            this.CountyName = @countyName;

        }    /// <summary>
        /// A four digit code identifying a municipality or municipality-like area.
        /// <br/>Municipalities are defined by SSB in classification 131.
        /// <br/>&lt;see href="https://www.ssb.no/klass/klassifikasjoner/131" /&gt;
        /// <br/>FREG: Kommunenummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("municipalityNumber")]
        public string MunicipalityNumber { get; init; }

        /// <summary>
        /// The name of the municipality. Some municipalities also include names in Sámi languages.
        /// <br/>
        /// <br/>SSB: Kommunenavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("municipalityName")]
        public string MunicipalityName { get; init; }

        /// <summary>
        /// A two digit code identifying a county.
        /// <br/>Counties are defined by SSB in classification 104.
        /// <br/>&lt;see href="https://www.ssb.no/klass/klassifikasjoner/104" /&gt;
        /// <br/>SSB: Fylkesnummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countyNumber")]
        public string CountyNumber { get; init; }

        /// <summary>
        /// The name of the county. Some counties also include names in Sámi languages.
        /// <br/>
        /// <br/>SSB: Fylkesnavn
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countyName")]
        public string CountyName { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Body
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Body(string @nin)

        {

            this.Nin = @nin;

        }    /// <summary>
        /// Norwegian Identification Number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nin")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength = 1)]
        public string Nin { get; init; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Body2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Body2(System.Collections.Generic.ICollection<string> @personIds)

        {

            this.PersonIds = @personIds;

        }    /// <summary>
        /// The list of person ids, max 100 items. Supports comma separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("personIds")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<string> PersonIds { get; init; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Body3
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Body3(System.Collections.Generic.ICollection<string> @nins)

        {

            this.Nins = @nins;

        }    /// <summary>
        /// List of Norwegian Identification Numbers, max 100 items. Supports comma separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nins")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<string> Nins { get; init; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Body4
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Body4(string @nin)

        {

            this.Nin = @nin;

        }    /// <summary>
        /// Norwegian Identification Number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nin")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength = 1)]
        public string Nin { get; init; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Body5
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Body5(System.Collections.Generic.ICollection<string> @personIds)

        {

            this.PersonIds = @personIds;

        }    /// <summary>
        /// The list of person ids, max 100 items. Supports comma separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("personIds")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<string> PersonIds { get; init; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Body6
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Body6(System.Collections.Generic.ICollection<string> @nins)

        {

            this.Nins = @nins;

        }    /// <summary>
        /// List of Norwegian Identification Numbers, max 100 items. Supports comma separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nins")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<string> Nins { get; init; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Body7
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Body7(string @birthDate, string @cityName, string @familyName, string @fullName, Gender? @gender, string @givenName, string @middleName, string @municipalityNumber, string @postalCode, string @streetAddress)

        {

            this.BirthDate = @birthDate;

            this.Gender = @gender;

            this.FullName = @fullName;

            this.GivenName = @givenName;

            this.MiddleName = @middleName;

            this.FamilyName = @familyName;

            this.StreetAddress = @streetAddress;

            this.PostalCode = @postalCode;

            this.CityName = @cityName;

            this.MunicipalityNumber = @municipalityNumber;

        }    /// <summary>
        /// The person's date of birth provided as a string, formatted as YYYY-MM-DD.
        /// <br/>Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BirthDate")]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0-9-]{0,6}")]
        public string BirthDate { get; init; }

        /// <summary>
        /// The person's gender
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("Gender")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Gender? Gender { get; init; }

        /// <summary>
        /// The whole or parts of a person's full name. Only letters are allowed, up to 600 characters.
        /// <br/>The search string will be divided into separate search words, and these words can match
        /// <br/>the start of any part of the person's full name, regardless of the order of search words.
        /// <br/>Only the first three search words will be used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("FullName")]
        [System.ComponentModel.DataAnnotations.StringLength(600, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string FullName { get; init; }

        /// <summary>
        /// The whole or the first part of a person's given name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GivenName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string GivenName { get; init; }

        /// <summary>
        /// The whole or first part of a person's middle name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("MiddleName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string MiddleName { get; init; }

        /// <summary>
        /// The whole or first part of a person's family name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("FamilyName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string FamilyName { get; init; }

        /// <summary>
        /// The street address of the street where the person lives.
        /// <br/>Contains of letters, housenumber, and houseletter, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("StreetAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}\p{N}]+[\p{L}\s\p{N}\-\.\'\,\/]*")]
        public string StreetAddress { get; init; }

        /// <summary>
        /// The postal code (postnummer) number where the person lives.
        /// <br/>If provided, needs to be exactly four digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{4}")]
        public string PostalCode { get; init; }

        /// <summary>
        /// The city name (poststed) of the city the person lives in.
        /// <br/>Only letters allowed, up to 100 characters
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("CityName")]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string CityName { get; init; }

        /// <summary>
        /// The municipality number of the municipality the person lives in.
        /// <br/>If provided, needs to be exactly four digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("MunicipalityNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{4}")]
        public string MunicipalityNumber { get; init; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Body8
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Body8(string @basicStatisticalUnit, string @birthDateFrom, string @birthDateTo, string @familyName, string @fullName, Gender? @gender, string @givenName, int? @indexOffset, string @middleName, string @municipalityNumber, int? @pageSize, System.Collections.Generic.ICollection<PersonStatusType> @personStatuses, string @postalCode, string @streetAddress)

        {

            this.PageSize = @pageSize;

            this.IndexOffset = @indexOffset;

            this.FullName = @fullName;

            this.GivenName = @givenName;

            this.MiddleName = @middleName;

            this.FamilyName = @familyName;

            this.StreetAddress = @streetAddress;

            this.PostalCode = @postalCode;

            this.MunicipalityNumber = @municipalityNumber;

            this.BasicStatisticalUnit = @basicStatisticalUnit;

            this.BirthDateFrom = @birthDateFrom;

            this.BirthDateTo = @birthDateTo;

            this.Gender = @gender;

            this.PersonStatuses = @personStatuses;

        }    /// <summary>
        /// The maximum size of the returned result set. Defaults to 1000, max page size is 10000.
        /// <br/>When the returned result set is less then the requested page size then you have reached the end of the total search result.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("PageSize")]
        [System.ComponentModel.DataAnnotations.Range(1, 10000)]
        public int? PageSize { get; init; }

        /// <summary>
        /// The index offset for the search. A paged-match-list search will return both a startIndex and endIndex in the response.
        /// <br/>If the number of search results is larger than the page size, the next portion of the result can be retrieved by setting the
        /// <br/>index offset to the end index of the first result, plus one (endIndex + 1).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("IndexOffset")]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? IndexOffset { get; init; }

        /// <summary>
        /// The whole or parts of a person's full name. Only letters are allowed, up to 600 characters.
        /// <br/>The search string will be divided into separate search words, and these words can match
        /// <br/>the start of any part of the person's full name, regardless of the order of search words.
        /// <br/>Only the first three search words will be used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("FullName")]
        [System.ComponentModel.DataAnnotations.StringLength(600, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string FullName { get; init; }

        /// <summary>
        /// The whole or the first part of a person's given name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GivenName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string GivenName { get; init; }

        /// <summary>
        /// The whole or first part of a person's middle name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("MiddleName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string MiddleName { get; init; }

        /// <summary>
        /// The whole or first part of a person's family name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("FamilyName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string FamilyName { get; init; }

        /// <summary>
        /// The street address of the street where the person lives.
        /// <br/>Contains of letters, house number, and house letter, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("StreetAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 5)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}\p{N}]+[\p{L}\s\p{N}\-\.\'\,\/]*")]
        public string StreetAddress { get; init; }

        /// <summary>
        /// The postal code (postnummer) number where the person lives.
        /// <br/>If provided, needs to be exactly four digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{4}")]
        public string PostalCode { get; init; }

        /// <summary>
        /// The municipality number of the municipality the person lives in.
        /// <br/>If provided, needs to be exactly four digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("MunicipalityNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{4}")]
        public string MunicipalityNumber { get; init; }

        /// <summary>
        /// The basic statistical unit number of the basic statistical unit the person lives in.
        /// <br/>If provided, needs to be exactly eight digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BasicStatisticalUnit")]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 8)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{8}")]
        public string BasicStatisticalUnit { get; init; }

        /// <summary>
        /// Will return persons with a birthday equal to or higher than the given value.
        /// <br/>The person's date of birth provided as a string, formatted as YYYY-MM-DD
        /// <br/>Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BirthDateFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0-9-]{0,6}")]
        public string BirthDateFrom { get; init; }

        /// <summary>
        /// Will return persons with a birthday equal to or lower than the given value.
        /// <br/>The person's date of birth provided as a string, formatted as YYYY-MM-DD.
        /// <br/>Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BirthDateTo")]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0-9-]{0,6}")]
        public string BirthDateTo { get; init; }

        /// <summary>
        /// The person's gender
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("Gender")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Gender? Gender { get; init; }

        /// <summary>
        /// The nature of the relationship/connection
        /// <br/>to Norway and the National Population Registry
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("PersonStatuses")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<PersonStatusType> PersonStatuses { get; init; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Body9
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Body9(string @basicStatisticalUnit, string @birthDateFrom, string @birthDateTo, string @familyName, string @fullName, Gender? @gender, string @givenName, string @middleName, string @municipalityNumber, System.Collections.Generic.ICollection<PersonStatusType> @personStatuses, string @postalCode, string @streetAddress)

        {

            this.FullName = @fullName;

            this.GivenName = @givenName;

            this.MiddleName = @middleName;

            this.FamilyName = @familyName;

            this.StreetAddress = @streetAddress;

            this.PostalCode = @postalCode;

            this.MunicipalityNumber = @municipalityNumber;

            this.BasicStatisticalUnit = @basicStatisticalUnit;

            this.BirthDateFrom = @birthDateFrom;

            this.BirthDateTo = @birthDateTo;

            this.Gender = @gender;

            this.PersonStatuses = @personStatuses;

        }    /// <summary>
        /// The whole or parts of a person's full name. Only letters are allowed, up to 600 characters.
        /// <br/>The search string will be divided into separate search words, and these words can match
        /// <br/>the start of any part of the person's full name, regardless of the order of search words.
        /// <br/>Only the first three search words will be used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("FullName")]
        [System.ComponentModel.DataAnnotations.StringLength(600, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string FullName { get; init; }

        /// <summary>
        /// The whole or the first part of a person's given name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GivenName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string GivenName { get; init; }

        /// <summary>
        /// The whole or first part of a person's middle name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("MiddleName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string MiddleName { get; init; }

        /// <summary>
        /// The whole or first part of a person's family name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("FamilyName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string FamilyName { get; init; }

        /// <summary>
        /// The street address of the street where the person lives.
        /// <br/>Contains of letters, house number, and house letter, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("StreetAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 5)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}\p{N}]+[\p{L}\s\p{N}\-\.\'\,\/]*")]
        public string StreetAddress { get; init; }

        /// <summary>
        /// The postal code (postnummer) number where the person lives.
        /// <br/>If provided, needs to be exactly four digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{4}")]
        public string PostalCode { get; init; }

        /// <summary>
        /// The municipality number of the municipality the person lives in.
        /// <br/>If provided, needs to be exactly four digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("MunicipalityNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{4}")]
        public string MunicipalityNumber { get; init; }

        /// <summary>
        /// The basic statistical unit number of the basic statistical unit the person lives in.
        /// <br/>If provided, needs to be exactly eight digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BasicStatisticalUnit")]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 8)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{8}")]
        public string BasicStatisticalUnit { get; init; }

        /// <summary>
        /// Will return persons with a birthday equal to or higher than the given value.
        /// <br/>The person's date of birth provided as a string, formatted as YYYY-MM-DD
        /// <br/>Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BirthDateFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0-9-]{0,6}")]
        public string BirthDateFrom { get; init; }

        /// <summary>
        /// Will return persons with a birthday equal to or lower than the given value.
        /// <br/>The person's date of birth provided as a string, formatted as YYYY-MM-DD.
        /// <br/>Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BirthDateTo")]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0-9-]{0,6}")]
        public string BirthDateTo { get; init; }

        /// <summary>
        /// The person's gender
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("Gender")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Gender? Gender { get; init; }

        /// <summary>
        /// The nature of the relationship/connection
        /// <br/>to Norway and the National Population Registry
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("PersonStatuses")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<PersonStatusType> PersonStatuses { get; init; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Body10
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Body10(string @birthDate, string @cityName, string @familyName, string @fullName, Gender? @gender, string @givenName, string @middleName, string @municipalityNumber, string @postalCode, string @streetAddress)

        {

            this.BirthDate = @birthDate;

            this.Gender = @gender;

            this.FullName = @fullName;

            this.GivenName = @givenName;

            this.MiddleName = @middleName;

            this.FamilyName = @familyName;

            this.StreetAddress = @streetAddress;

            this.PostalCode = @postalCode;

            this.CityName = @cityName;

            this.MunicipalityNumber = @municipalityNumber;

        }    /// <summary>
        /// The person's date of birth provided as a string, formatted as YYYY-MM-DD.
        /// <br/>Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BirthDate")]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0-9-]{0,6}")]
        public string BirthDate { get; init; }

        /// <summary>
        /// The person's gender
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("Gender")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Gender? Gender { get; init; }

        /// <summary>
        /// The whole or parts of a person's full name. Only letters are allowed, up to 600 characters.
        /// <br/>The search string will be divided into separate search words, and these words can match
        /// <br/>the start of any part of the person's full name, regardless of the order of search words.
        /// <br/>Only the first three search words will be used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("FullName")]
        [System.ComponentModel.DataAnnotations.StringLength(600, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string FullName { get; init; }

        /// <summary>
        /// The whole or the first part of a person's given name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GivenName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string GivenName { get; init; }

        /// <summary>
        /// The whole or first part of a person's middle name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("MiddleName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string MiddleName { get; init; }

        /// <summary>
        /// The whole or first part of a person's family name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("FamilyName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string FamilyName { get; init; }

        /// <summary>
        /// The street address of the street where the person lives.
        /// <br/>Contains of letters, housenumber, and houseletter, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("StreetAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}\p{N}]+[\p{L}\s\p{N}\-\.\'\,\/]*")]
        public string StreetAddress { get; init; }

        /// <summary>
        /// The postal code (postnummer) number where the person lives.
        /// <br/>If provided, needs to be exactly four digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{4}")]
        public string PostalCode { get; init; }

        /// <summary>
        /// The city name (poststed) of the city the person lives in.
        /// <br/>Only letters allowed, up to 100 characters
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("CityName")]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string CityName { get; init; }

        /// <summary>
        /// The municipality number of the municipality the person lives in.
        /// <br/>If provided, needs to be exactly four digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("MunicipalityNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{4}")]
        public string MunicipalityNumber { get; init; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Body11
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Body11(string @basicStatisticalUnit, string @birthDateFrom, string @birthDateTo, string @familyName, string @fullName, Gender? @gender, string @givenName, int? @indexOffset, string @middleName, string @municipalityNumber, int? @pageSize, System.Collections.Generic.ICollection<PersonStatusType> @personStatuses, string @postalCode, string @streetAddress)

        {

            this.PageSize = @pageSize;

            this.IndexOffset = @indexOffset;

            this.FullName = @fullName;

            this.GivenName = @givenName;

            this.MiddleName = @middleName;

            this.FamilyName = @familyName;

            this.StreetAddress = @streetAddress;

            this.PostalCode = @postalCode;

            this.MunicipalityNumber = @municipalityNumber;

            this.BasicStatisticalUnit = @basicStatisticalUnit;

            this.BirthDateFrom = @birthDateFrom;

            this.BirthDateTo = @birthDateTo;

            this.Gender = @gender;

            this.PersonStatuses = @personStatuses;

        }    /// <summary>
        /// The maximum size of the returned result set. Defaults to 1000, max page size is 10000.
        /// <br/>When the returned result set is less then the requested page size then you have reached the end of the total search result.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("PageSize")]
        [System.ComponentModel.DataAnnotations.Range(1, 10000)]
        public int? PageSize { get; init; }

        /// <summary>
        /// The index offset for the search. A paged-match-list search will return both a startIndex and endIndex in the response.
        /// <br/>If the number of search results is larger than the page size, the next portion of the result can be retrieved by setting the
        /// <br/>index offset to the end index of the first result, plus one (endIndex + 1).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("IndexOffset")]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? IndexOffset { get; init; }

        /// <summary>
        /// The whole or parts of a person's full name. Only letters are allowed, up to 600 characters.
        /// <br/>The search string will be divided into separate search words, and these words can match
        /// <br/>the start of any part of the person's full name, regardless of the order of search words.
        /// <br/>Only the first three search words will be used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("FullName")]
        [System.ComponentModel.DataAnnotations.StringLength(600, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string FullName { get; init; }

        /// <summary>
        /// The whole or the first part of a person's given name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GivenName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string GivenName { get; init; }

        /// <summary>
        /// The whole or first part of a person's middle name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("MiddleName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string MiddleName { get; init; }

        /// <summary>
        /// The whole or first part of a person's family name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("FamilyName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string FamilyName { get; init; }

        /// <summary>
        /// The street address of the street where the person lives.
        /// <br/>Contains of letters, house number, and house letter, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("StreetAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 5)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}\p{N}]+[\p{L}\s\p{N}\-\.\'\,\/]*")]
        public string StreetAddress { get; init; }

        /// <summary>
        /// The postal code (postnummer) number where the person lives.
        /// <br/>If provided, needs to be exactly four digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{4}")]
        public string PostalCode { get; init; }

        /// <summary>
        /// The municipality number of the municipality the person lives in.
        /// <br/>If provided, needs to be exactly four digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("MunicipalityNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{4}")]
        public string MunicipalityNumber { get; init; }

        /// <summary>
        /// The basic statistical unit number of the basic statistical unit the person lives in.
        /// <br/>If provided, needs to be exactly eight digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BasicStatisticalUnit")]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 8)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{8}")]
        public string BasicStatisticalUnit { get; init; }

        /// <summary>
        /// Will return persons with a birthday equal to or higher than the given value.
        /// <br/>The person's date of birth provided as a string, formatted as YYYY-MM-DD
        /// <br/>Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BirthDateFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0-9-]{0,6}")]
        public string BirthDateFrom { get; init; }

        /// <summary>
        /// Will return persons with a birthday equal to or lower than the given value.
        /// <br/>The person's date of birth provided as a string, formatted as YYYY-MM-DD.
        /// <br/>Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BirthDateTo")]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0-9-]{0,6}")]
        public string BirthDateTo { get; init; }

        /// <summary>
        /// The person's gender
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("Gender")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Gender? Gender { get; init; }

        /// <summary>
        /// The nature of the relationship/connection
        /// <br/>to Norway and the National Population Registry
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("PersonStatuses")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<PersonStatusType> PersonStatuses { get; init; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Body12
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Body12(string @basicStatisticalUnit, string @birthDateFrom, string @birthDateTo, string @familyName, string @fullName, Gender? @gender, string @givenName, string @middleName, string @municipalityNumber, System.Collections.Generic.ICollection<PersonStatusType> @personStatuses, string @postalCode, string @streetAddress)

        {

            this.FullName = @fullName;

            this.GivenName = @givenName;

            this.MiddleName = @middleName;

            this.FamilyName = @familyName;

            this.StreetAddress = @streetAddress;

            this.PostalCode = @postalCode;

            this.MunicipalityNumber = @municipalityNumber;

            this.BasicStatisticalUnit = @basicStatisticalUnit;

            this.BirthDateFrom = @birthDateFrom;

            this.BirthDateTo = @birthDateTo;

            this.Gender = @gender;

            this.PersonStatuses = @personStatuses;

        }    /// <summary>
        /// The whole or parts of a person's full name. Only letters are allowed, up to 600 characters.
        /// <br/>The search string will be divided into separate search words, and these words can match
        /// <br/>the start of any part of the person's full name, regardless of the order of search words.
        /// <br/>Only the first three search words will be used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("FullName")]
        [System.ComponentModel.DataAnnotations.StringLength(600, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string FullName { get; init; }

        /// <summary>
        /// The whole or the first part of a person's given name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GivenName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string GivenName { get; init; }

        /// <summary>
        /// The whole or first part of a person's middle name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("MiddleName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string MiddleName { get; init; }

        /// <summary>
        /// The whole or first part of a person's family name.
        /// <br/>Only letters are allowed, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("FamilyName")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}]+[\p{L}\s\-\']*")]
        public string FamilyName { get; init; }

        /// <summary>
        /// The street address of the street where the person lives.
        /// <br/>Contains of letters, house number, and house letter, up to 200 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("StreetAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 5)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[\s]*[\p{L}\p{N}]+[\p{L}\s\p{N}\-\.\'\,\/]*")]
        public string StreetAddress { get; init; }

        /// <summary>
        /// The postal code (postnummer) number where the person lives.
        /// <br/>If provided, needs to be exactly four digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{4}")]
        public string PostalCode { get; init; }

        /// <summary>
        /// The municipality number of the municipality the person lives in.
        /// <br/>If provided, needs to be exactly four digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("MunicipalityNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{4}")]
        public string MunicipalityNumber { get; init; }

        /// <summary>
        /// The basic statistical unit number of the basic statistical unit the person lives in.
        /// <br/>If provided, needs to be exactly eight digits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BasicStatisticalUnit")]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 8)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{8}")]
        public string BasicStatisticalUnit { get; init; }

        /// <summary>
        /// Will return persons with a birthday equal to or higher than the given value.
        /// <br/>The person's date of birth provided as a string, formatted as YYYY-MM-DD
        /// <br/>Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BirthDateFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0-9-]{0,6}")]
        public string BirthDateFrom { get; init; }

        /// <summary>
        /// Will return persons with a birthday equal to or lower than the given value.
        /// <br/>The person's date of birth provided as a string, formatted as YYYY-MM-DD.
        /// <br/>Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("BirthDateTo")]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0-9-]{0,6}")]
        public string BirthDateTo { get; init; }

        /// <summary>
        /// The person's gender
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("Gender")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Gender? Gender { get; init; }

        /// <summary>
        /// The nature of the relationship/connection
        /// <br/>to Norway and the National Population Registry
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("PersonStatuses")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<PersonStatusType> PersonStatuses { get; init; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersontjenestenApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public PersontjenestenApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersontjenestenApiException<TResult> : PersontjenestenApiException
    {
        public TResult Result { get; private set; }

        public PersontjenestenApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625